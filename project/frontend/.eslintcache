[{"C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\index.js":"1","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\App.js":"2","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\layout\\Layout.js":"3","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\CourseBase.js":"4","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\Home.js":"5","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\assets\\ProfilePage.js":"6","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\AboutUs.js":"7","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\forgotpassword.js":"8","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\Login.js":"9","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\ContactUs.js":"10","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\AnnouncementIns.js":"11","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\recoverpassword.js":"12","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\admin.js":"13","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\HomeIns.js":"14","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\entityassignment.js":"15","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\Assignment.js":"16","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\assets\\Home.js":"17","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\assets\\CoursesPage.js":"18","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\SignUp.js":"19","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\dashboard.js":"20","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\horizontalnavIns.js":"21","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\navigations\\MenuBar.js":"22","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\misc\\Header.js":"23","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\misc\\Testimonials.js":"24","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\navigations\\Footer.js":"25","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\misc\\Pricing.js":"26","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\assets\\CourseCardBrowse.js":"27","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\assets\\ClassSearchPage.js":"28","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\assets\\AnnouncementsTable.js":"29","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\assets\\AssignmentsTable.js":"30","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\assets\\CalendarStud.js":"31","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\CreateAssignment.js":"32","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\assets\\CourseCardEnroll.js":"33","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\TextEditorIns.js":"34","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\GradesWrapper.js":"35","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\assets\\CourseSearchWrapper.js":"36","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\modules.js":"37","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\Grades.js":"38","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\admindash.js":"39","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\assets\\ChatPage.js":"40","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\Stugrades.js":"41","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\assets\\InstructorSearch.js":"42","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\assets\\InstructorCourseCreate.js":"43","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\misc\\MainContent.js":"44"},{"size":460,"mtime":1682194072411,"results":"45","hashOfConfig":"46"},{"size":4387,"mtime":1682378190834,"results":"47","hashOfConfig":"46"},{"size":428,"mtime":1612177221000,"results":"48","hashOfConfig":"46"},{"size":1406,"mtime":1682378190837,"results":"49","hashOfConfig":"46"},{"size":499,"mtime":1682399177845,"results":"50","hashOfConfig":"46"},{"size":3020,"mtime":1682378190847,"results":"51","hashOfConfig":"46"},{"size":2957,"mtime":1682403125178,"results":"52","hashOfConfig":"46"},{"size":2892,"mtime":1682378190853,"results":"53","hashOfConfig":"46"},{"size":5488,"mtime":1682378609336,"results":"54","hashOfConfig":"46"},{"size":6396,"mtime":1682378190837,"results":"55","hashOfConfig":"46"},{"size":7289,"mtime":1682403125179,"results":"56","hashOfConfig":"46"},{"size":3977,"mtime":1682395391106,"results":"57","hashOfConfig":"46"},{"size":5815,"mtime":1682381466338,"results":"58","hashOfConfig":"46"},{"size":5854,"mtime":1682403125182,"results":"59","hashOfConfig":"46"},{"size":5738,"mtime":1682403971219,"results":"60","hashOfConfig":"46"},{"size":5083,"mtime":1682403971218,"results":"61","hashOfConfig":"46"},{"size":940,"mtime":1682439034619,"results":"62","hashOfConfig":"46"},{"size":2696,"mtime":1682403125185,"results":"63","hashOfConfig":"46"},{"size":7121,"mtime":1682395391106,"results":"64","hashOfConfig":"46"},{"size":9990,"mtime":1682436721530,"results":"65","hashOfConfig":"46"},{"size":3169,"mtime":1682378190853,"results":"66","hashOfConfig":"46"},{"size":1124,"mtime":1681968444026,"results":"67","hashOfConfig":"46"},{"size":699,"mtime":1682399177845,"results":"68","hashOfConfig":"46"},{"size":1456,"mtime":1682399177845,"results":"69","hashOfConfig":"46"},{"size":1397,"mtime":1680808316442,"results":"70","hashOfConfig":"46"},{"size":2391,"mtime":1682399177845,"results":"71","hashOfConfig":"46"},{"size":2636,"mtime":1682403125183,"results":"72","hashOfConfig":"46"},{"size":5559,"mtime":1682378190844,"results":"73","hashOfConfig":"46"},{"size":3885,"mtime":1682439034616,"results":"74","hashOfConfig":"46"},{"size":2426,"mtime":1682439034617,"results":"75","hashOfConfig":"46"},{"size":6433,"mtime":1682439085913,"results":"76","hashOfConfig":"46"},{"size":6786,"mtime":1682403971219,"results":"77","hashOfConfig":"46"},{"size":4565,"mtime":1682435622384,"results":"78","hashOfConfig":"46"},{"size":1348,"mtime":1681148873140,"results":"79","hashOfConfig":"46"},{"size":336,"mtime":1682378190838,"results":"80","hashOfConfig":"46"},{"size":351,"mtime":1682378190846,"results":"81","hashOfConfig":"46"},{"size":8379,"mtime":1682403125189,"results":"82","hashOfConfig":"46"},{"size":8969,"mtime":1682406722773,"results":"83","hashOfConfig":"46"},{"size":9385,"mtime":1682378190839,"results":"84","hashOfConfig":"46"},{"size":11410,"mtime":1682403125183,"results":"85","hashOfConfig":"46"},{"size":5122,"mtime":1682406725506,"results":"86","hashOfConfig":"46"},{"size":5257,"mtime":1682378190847,"results":"87","hashOfConfig":"46"},{"size":6957,"mtime":1682378190847,"results":"88","hashOfConfig":"46"},{"size":3448,"mtime":1682399177845,"results":"89","hashOfConfig":"46"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},"lxgfeh",{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"92"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"92"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"92"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"92"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"92"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"92"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"92"},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"92"},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"92"},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"92"},{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"92"},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"92"},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"92"},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"92"},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"92"},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"92"},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"92"},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"92"},{"filePath":"165","messages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"167","messages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"169","messages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"171","messages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"92"},{"filePath":"174","messages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"176","messages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"178","messages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"180","messages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"182","messages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"92"},{"filePath":"185","messages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"92"},{"filePath":"188","messages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"92"},{"filePath":"191","messages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"92"},{"filePath":"194","messages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"92"},{"filePath":"197","messages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"92"},{"filePath":"200","messages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"202","messages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},"C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\index.js",[],["204","205"],"C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\App.js",["206","207"],"import React from 'react'\r\nimport {\r\n  BrowserRouter as Router, \r\n  Routes,\r\n  Route\r\n} from 'react-router-dom'\r\nimport Layout from './layout/Layout'\r\nimport Home from './components/pages/Home'\r\nimport AboutUs from './components/pages/AboutUs'\r\nimport ContactUs from './components/pages/ContactUs'\r\nimport Login from './components/pages/Login'\r\nimport SignUp from './components/pages/SignUp'\r\nimport './App.css';\r\nimport Dashboard from \"./components/pages/dashboard\";\r\nimport { StyledEngineProvider } from \"@mui/material/styles\";\r\nimport DashboardHome from './components/pages/assets/Home'\r\nimport CoursesPage from './components/pages/assets/CoursesPage'\r\nimport CoursePageWrapper from './components/pages/assets/CourseSearchWrapper'\r\n// import ClassSearchPage from './components/pages/assets/ClassSearchPage'\r\nimport CourseBase from './components/pages/CourseBase'\r\nimport CourseHome from './components/pages/HomeIns'\r\nimport Announcements from './components/pages/AnnouncementIns'\r\nimport Assignment from './components/pages/Assignment'\r\nimport ProfilePage from './components/pages/assets/ProfilePage'\r\nimport AdminDashboard from './components/pages/admin'\r\nimport ForgotPassword from './components/pages/forgotpassword'\r\nimport PasswordRecovery from './components/pages/recoverpassword'\r\nimport ChatPage from './components/pages/assets/ChatPage'\r\nimport ModulePage from './components/pages/modules'\r\nimport Admindash from './components/pages/admindash'\r\nimport AssignmentDetails from './components/pages/entityassignment'\r\nimport Grades from './components/pages/Grades'\r\nimport GradeWrapper from './components/pages/GradesWrapper'\r\n\r\nfunction App() {\r\n  const Check = (props) => {\r\n    return (\r\n      <StyledEngineProvider injectFirst>\r\n        <Dashboard props = {props}></Dashboard>\r\n      </StyledEngineProvider>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"body-wrap\">\r\n      <Router>\r\n      <Routes>\r\n          <Route path={'/*'} element = {<Layout>\r\n            <Routes>\r\n            <Route index element={<Home/>}></Route>\r\n            <Route path={'/AboutUs'} element={<AboutUs/>}></Route>\r\n            <Route path={'/ContactUs'} element={<ContactUs/>}></Route>\r\n            <Route path={'/Login'} element={<Login/>}></Route>\r\n            <Route path={'/SignUp'} element={<SignUp/>}></Route>\r\n            <Route path={'/forgotpassword'} element={<ForgotPassword/>}></Route>\r\n            <Route path={'/api/recover_confirm/'} element={<PasswordRecovery/>}></Route>\r\n            </Routes>\r\n            </Layout>\r\n          }/>\r\n          <Route path={'/dashboard/*'} element={<Dashboard>\r\n            <Routes>\r\n              <Route index element={<DashboardHome/>}></Route>\r\n              <Route path={'/mycourses'} element = {<CoursesPage/>}></Route>\r\n              <Route path = {'/coursebrowse'} element = {<CoursePageWrapper/>}></Route>\r\n              <Route path = {'/admin'} element = {<AdminDashboard/>}></Route>\r\n              <Route path = {'/profile'} element = {<ProfilePage/>}></Route>\r\n              <Route path = {'/chat'} element = {<ChatPage/>}></Route>\r\n\r\n            </Routes>\r\n            </Dashboard>\r\n              } />\r\n\r\n          <Route path={'/course/:courseId/*'} element={<Dashboard> <CourseBase>\r\n            <Routes>\r\n                <Route path=\"\" index element = {<CourseHome key={'/course'} prop={'home'}/>}></Route>\r\n                <Route path = {'/syllabus'} element = {<CourseHome key={'/syllabus'} prop={'syllabus'}/>}></Route>\r\n                <Route path = {'/announcements'} element = {<Announcements/>}></Route>\r\n                <Route path = {'/modules'} element = {<ModulePage/>}></Route>\r\n                <Route path = {'/assignments'} element = {<Assignment/>}></Route>\r\n                <Route path={\"/assignments/:assignmentId\"} element={<AssignmentDetails/>} />\r\n                <Route path = {'/grading'} element = {<GradeWrapper/>}></Route>s\r\n              </Routes>\r\n            </CourseBase>\r\n            </Dashboard>\r\n              } />\r\n\r\n          <Route path={'/admindashboard/*'} element={<Admindash>\r\n            <Routes>\r\n              <Route index element={<AdminDashboard/>}></Route>\r\n              <Route path={'/adminpanel'} element = {<CoursesPage/>}></Route>\r\n            </Routes>\r\n            </Admindash>\r\n              } />\r\n\r\n        </Routes>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\layout\\Layout.js",[],"C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\CourseBase.js",["208","209","210","211","212","213","214"],"// import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport React, { useState } from 'react';\r\n// import VerticalNavigation from './verticalnavigationIns';\r\nimport HorizontalNavigation from './horizontalnavIns';\r\nimport { render } from \"react-dom\";  \r\n// import '../../App.css';\r\n// import Home from './HomeIns';\r\n// import Announcements from './AnnouncementIns';\r\n// import CreateAssignment from './CreateAssignment';\r\n// import Assignment from './Assignment';\r\nimport Box from '@mui/material/Box'\r\n\r\nconst CourseBase = (props) => {\r\n  const [horizontalNavItem, setHorizontalNavItem] = useState('Home');\r\n\r\n  const [homecont, setHomecont] = useState('Welcome to Home!')\r\n  const [syllcont, setSyllcont] = useState('Welcome to Syllabus Page!')\r\n\r\n  const handleHomepage = (newcont) => {\r\n    setHomecont(newcont);\r\n  }\r\n\r\n  const handleSyllpage = (newcont) => {\r\n    setSyllcont(newcont);\r\n  }\r\n\r\n  const handleHorizontalNavClick = (item) => {\r\n    setHorizontalNavItem(item);\r\n  };\r\n\r\n  return (\r\n    <div className=\"App1\">\r\n      <div className=\"navigation\">\r\n        <HorizontalNavigation onItemClick={handleHorizontalNavClick} />\r\n      </div>\r\n      {/* <div className=\"content\"> */}\r\n      <Box sx={{marginLeft:\"20px\", marginRight:\"20px\",marginTop:\"5px\"}}>\r\n        {props.children}\r\n        </Box>\r\n      {/* </div> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CourseBase;\r\n\r\n\r\n\r\n","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\Home.js",[],"C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\assets\\ProfilePage.js",["215","216","217","218","219"],"import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\n// import Button from '@material-ui/core/Button';\r\n// import { deepOrange, deepPurple } from \"@mui/material/colors\";\r\n\r\nvar baseUrl = \"https://edusphere.vercel.app\"\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(2),\r\n    margin: theme.spacing(2),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    margin: theme.spacing(2),\r\n    backgroundColor: '#F8F8F8',\r\n  },\r\n  avatar: {\r\n    width: theme.spacing(10),\r\n    height: theme.spacing(10),\r\n  },\r\n  name: {\r\n    fontWeight: 'bold',\r\n    fontSize: '1.5rem',\r\n    marginTop: theme.spacing(2),\r\n  },\r\n  bio: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n  button: {\r\n    margin: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nfunction ProfilePage() {\r\n  const classes = useStyles();\r\n\r\n  const [user, setUser] = useState({\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    emailAddress: \"\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    async function getProfile() {\r\n      try {\r\n        const response = await fetch(baseUrl + `/api/profile/?userId=${localStorage.getItem(\"userId\")}`, {\r\n          method: 'GET',\r\n        });\r\n        const data = await response.json();\r\n        setUser({\r\n          firstName: data.firstName,\r\n          lastName: data.lastName,\r\n          emailAddress: data.email_address,\r\n          userType: data.userType,\r\n        });\r\n        console.log(data);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    }\r\n    getProfile(); \r\n  }, []);\r\n\r\n  let userTypeText = \"\";\r\n  if (user.userType == \"S\") {\r\n    userTypeText = \"Student\";\r\n  } else if (user.userType == \"I\" || user.userType == 'i') {\r\n    userTypeText = \"Instructor\";\r\n  } else if (user.userType == \"A\" || user.userType == 'a') {\r\n    userTypeText = \"Admin\";\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12}>\r\n          <Paper className={classes.paper}>\r\n            <Avatar style={{backgroundColor: 'blueviolet'}}>\r\n\r\n              {user.firstName.charAt(0).toUpperCase()}\r\n            </Avatar>\r\n            \r\n            <Typography className={classes.name}>\r\n              {user.firstName} {user.lastName}\r\n            </Typography>\r\n            <Typography variant=\"subtitle1\" className={classes.bio}>Email: {user.emailAddress}</Typography>\r\n            <Typography variant=\"subtitle1\" className={classes.bio}>Account Type: {userTypeText}</Typography>\r\n            {/* <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.button}\r\n            >\r\n              Edit Profile\r\n            </Button> */}\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProfilePage;\r\n","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\AboutUs.js",[],"C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\forgotpassword.js",["220"],"import React, { useState } from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Alert from \"@mui/material/Alert\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nvar baseUrl = \"https://edusphere.vercel.app\"\r\n\r\n\r\nconst ForgotPassword = () => {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n  const [successMessage, setSuccessMessage] = useState(\"\");\r\n  const navigate = useNavigate();\r\n\r\n  const handleSubmit = async () => {\r\n    setIsLoading(true);\r\n    setErrorMessage(\"\");\r\n    setSuccessMessage(\"\");\r\n\r\n    const API_ENDPOINT = baseUrl + \"/api/recover/\";\r\n\r\n    try {\r\n        console.log(email);\r\n      const response = await fetch(API_ENDPOINT, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          username: email,\r\n        }),\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (response.ok) {\r\n        console.log(data);\r\n        setIsLoading(false);\r\n        setSuccessMessage(\r\n          \"A password reset link has been sent to your email address.\"\r\n        );\r\n      } else {\r\n        setIsLoading(false);\r\n        setErrorMessage(data.Status || \"An error occurred. Please try again.\");\r\n      }\r\n    } catch (error) {\r\n      setIsLoading(false);\r\n      setErrorMessage(\"A network error occurred. Please try again.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"body\">\r\n      <Box\r\n          component=\"form\"\r\n          sx={{\r\n            display: \"flex\",\r\n            flexDirection:\"column\",\r\n            justifyContent:\"center\",\r\n            alignItems: \"center\",\r\n            \"& > :not(style)\": { m: 3 },\r\n          }}\r\n        >\r\n        <h2 className=\"center\">Forgot Password</h2>\r\n        {errorMessage && (\r\n          <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n            {errorMessage}\r\n          </Alert>\r\n        )}\r\n        {successMessage && (\r\n          <Alert severity=\"success\" sx={{ mb: 2 }}>\r\n            {successMessage}\r\n          </Alert>\r\n        )}\r\n       \r\n       <Box display=\"flex\" gap={2} mb={3}>\r\n          <TextField sx={{ width: \"80%\" }}\r\n            fullWidth\r\n            label=\"Email\"\r\n            id=\"email\"\r\n            variant=\"outlined\"\r\n            onChange={(e) => setEmail(e.target.value)}\r\n          />\r\n          <Button variant=\"contained\" onClick={handleSubmit}>\r\n            Send Reset Link\r\n          </Button>\r\n        </Box>\r\n    </Box>\r\n        {isLoading && (\r\n          <Box className=\"center\">\r\n            <CircularProgress />\r\n          </Box>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ForgotPassword;\r\n","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\Login.js",["221"],"import React from \"react\";\r\nimport Box from '@mui/material/Box';\r\nimport TextField from '@mui/material/TextField';\r\nimport '../styles/login.css';\r\nimport '../styles/common.css';\r\nimport Button from '@mui/material/Button';\r\nimport { useNavigate,useLocation } from \"react-router-dom\";\r\nimport { useState,useEffect } from \"react\";\r\nimport Alert from \"@mui/material/Alert\";\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport { Link } from \"react-router-dom\";\r\nimport Card from '@mui/material/Card';\r\nimport CardContent from '@mui/material/CardContent';\r\n// import { GoogleLogin } from '@react-oauth/google';\r\nimport GoogleLogin from 'react-google-login';\r\n\r\nvar baseUrl = \"https://edusphere.vercel.app\"\r\n\r\n\r\nconst Login = ()=> {\r\n  const [email,setEmail] = useState('');\r\n  const [password,setPassword] = useState('');\r\n  const [registrationMessage,setRegistrationMessage] = useState('');\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n\r\n  useEffect(() => {\r\n    setRegistrationMessage(location.state?.message);\r\n  }, [location.state?.message]);\r\n\r\n  \r\n  const handleSubmit = async() => {\r\n    console.log(email,password);\r\n    setIsLoading(true);\r\n    setRegistrationMessage('');\r\n    try {\r\n      const response = await fetch(baseUrl + '/login/', {\r\n        method: 'POST',\r\n        headers: {\r\n        'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          email: email,\r\n          password: password\r\n        }),\r\n      });\r\n  \r\n      const data = await response.json();\r\n      if (response.ok) {\r\n        // Handle successful login\r\n        setIsLoading(false);\r\n        if (data.Status.toLowerCase() === 'failed') {\r\n          setErrorMessage('Wrong Password!');\r\n          console.log(errorMessage);\r\n        } else {\r\n          console.log('cec')\r\n          localStorage.setItem(\"userId\", data.userId);\r\n          localStorage.setItem(\"userFullName\", data.userFullName);\r\n          localStorage.setItem(\"userType\", data.userType);\r\n          console.log(data.userId,data.userFullName,data.userType);\r\n          console.log('redirect to dashboard!')\r\n          // const basePath = location.pathname.split('/login')[0];\r\n        if (data.userType==='A') {\r\n            navigate('/admindashboard');\r\n        } else {\r\n        navigate('/dashboard');}\r\n      }\r\n      } else {\r\n        // Handle error from the server\r\n        console.log('Error:', data);\r\n        setIsLoading(false);\r\n        setErrorMessage(data.Status || 'An error occurred. Please try again.');\r\n      }\r\n    } catch (error) {\r\n      // Handle network errors\r\n      console.error('Network error:', error);\r\n      setIsLoading(false);\r\n      setErrorMessage('A network error occurred. Please try again.');\r\n    }\r\n  };\r\n\r\n  const responseGoogle = (response) => {\r\n    console.log(response);\r\n  }\r\n\r\n  const responseGoogle2 = (response) => {\r\n    if (response.error) {\r\n      console.log(\"Login failed: \", response.error);\r\n      return;\r\n    }\r\n  \r\n    const id_token = response.tokenId;\r\n    console.log(id_token);\r\n    // Send the ID token to your server for verification and authentication\r\n    // ...\r\n  };\r\n  \r\n\r\n  // render() {\r\n    return (\r\n      <>\r\n        <div className='body'>\r\n          <Box display={isLoading ? 'none' : 'flex'} flexDirection=\"column\" alignItems=\"center\" >\r\n          <Card sx={{ minWidth: 500,  height:\"70vh\",alignItems:\"center\",p: 2, boxShadow: '0 0 70px rgba(0, 0, 0, 0.1)', border: '2px solid rgba(0, 0, 0, 0.1)' }}>\r\n          <CardContent>\r\n            {registrationMessage && (\r\n              <Alert severity=\"success\" sx={{ marginBottom: 2 }}>\r\n                {registrationMessage}\r\n              </Alert>\r\n            )}\r\n            <h2 className='center'>Login</h2>\r\n            {errorMessage && (\r\n              <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n                {errorMessage}\r\n              </Alert>\r\n            )}\r\n            <form onSubmit={(e) => { e.preventDefault(); handleSubmit(); }}>\r\n              <Box display=\"flex\" flexDirection=\"column\" gap={2} mb={3} alignItems=\"center\">\r\n                <TextField style={{width: \"300px\"}} label=\"Email\" id=\"username\" variant=\"outlined\" onChange={e => setEmail(e.target.value)} required />\r\n                <TextField style={{width: \"300px\"}} label=\"Password\" variant=\"outlined\" id=\"password\" type=\"password\"\r\n                  onChange={e => setPassword(e.target.value)} required />\r\n                <Button sx={{alignItems:\"center\"}} variant=\"contained\" type='submit'>Login</Button>\r\n                \r\n                <GoogleLogin\r\n                  clientId=\"974079139845-gfaj6bnbq8ovr3rb6mvd9jd8e380mcuh.apps.googleusercontent.com\"\r\n                  buttonText=\"Login with Google\"\r\n                  onSuccess={responseGoogle}\r\n                  onFailure={responseGoogle}\r\n                  cookiePolicy={'single_host_origin'}\r\n                  isSignedIn={true}\r\n                />\r\n                <Link sx={{ mt: 2 }} to=\"/forgotpassword\" className=\"forgot-password-link\">Forgot Password?</Link>\r\n              </Box>\r\n            </form>\r\n            </CardContent>\r\n          </Card>\r\n          </Box>\r\n    \r\n          {isLoading && (\r\n            <Box className=\"center\">\r\n              <CircularProgress />\r\n            </Box>\r\n          )}\r\n        </div>\r\n      </>\r\n    );\r\n}    \r\n\r\nexport default Login;","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\ContactUs.js",["222","223"],"import React from 'react'\r\nimport { useState } from 'react';\r\n\r\n\r\nconst ContactUs = () => {\r\n\r\n\r\n    const [formData, setFormData] = useState({\r\n        name: '',\r\n        subject: '',\r\n        email: '',\r\n        phone: '',\r\n        message: '',\r\n      });\r\n\r\n      const [msg, setMsg] = useState(\"\")\r\n    \r\n      const handleChange = (event) => {\r\n        const { name, value } = event.target;\r\n        setFormData({\r\n          ...formData,\r\n          [name]: value,\r\n        });\r\n      };\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        console.log('sending',formData);\r\n\r\n    const apiEndpoint = 'http://localhost:8000/api/contact/';\r\n    \r\n    try {\r\n        const response = await fetch(apiEndpoint, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(formData),\r\n        });\r\n\r\n        const data = await response.json();\r\n        console.log(data);\r\n        if(data.Status == \"Success\"){\r\n            setMsg(data.displayMessage)\r\n        }\r\n\r\n        // Clear form data after successful submission\r\n        setFormData({\r\n            name: '',\r\n            subject: '',\r\n            email: '',\r\n            phone: '',\r\n            message: '',\r\n        });\r\n\r\n        } catch (error) {\r\n          console.error('Error submitting form data:', error);\r\n        }\r\n      };\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <section className=\"content-container\">\r\n                <div className=\"textArea\"> \r\n                    <h2>Contact Us</h2>\r\n                    <p>\r\n                        We would love to hear from you!.<br/>\r\n                        For any enquiries, feel free to drop us an email!\r\n                    </p>\r\n                    <p>\r\n                        How can we help you?\r\n                    </p>\r\n                </div>\r\n\r\n                <div className=\"block\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-left\">\r\n                            <form id=\"contact\" onSubmit={handleSubmit}>\r\n                                <h4>Leave us a message</h4>\r\n                                <fieldset>\r\n                                    <input placeholder=\"Your Name\" name=\"name\" type=\"text\" tabIndex=\"1\" required \r\n                                    autoFocus value={formData.name} onChange={handleChange} />\r\n                                </fieldset>\r\n                                <fieldset>\r\n                                    <input placeholder=\"Subject\" name=\"subject\" type=\"text\" tabIndex=\"2\" required \r\n                                    autoFocus value={formData.subject} onChange={handleChange}/>\r\n                                </fieldset>\r\n                                <fieldset>\r\n                                    <input placeholder=\"Your Email Address\" name=\"email\" type=\"email\" tabIndex=\"3\" \r\n                                    required autoFocus value={formData.email} onChange={handleChange} />\r\n                                </fieldset>\r\n                                <fieldset>\r\n                                    <input placeholder=\"Your Phone Number\"  name=\"phone\" type=\"tel\" tabIndex=\"4\" \r\n                                    required autoFocus value={formData.phone} onChange={handleChange}/>\r\n                                </fieldset>\r\n                                <fieldset>\r\n                                    <textarea placeholder=\"Type your Message Here....\" tabIndex=\"5\" name=\"message\"\r\n                                    required autoFocus value={formData.message} onChange={handleChange}></textarea>\r\n                                </fieldset>\r\n                                <fieldset>\r\n                                    <button name=\"submit\" type=\"submit\" id=\"contact-submit\" data-submit=\"...Sending\">Submit</button>\r\n                                </fieldset>\r\n                                {msg != \"\" ?\r\n                                    <p>{msg}</p>\r\n                                :\r\n                                    null\r\n                                }\r\n                            </form>\r\n                        </div>\r\n                        <div className=\"col-right\">\r\n                            <div id=\"details\">\r\n                                <h4>Drop by our Office</h4>\r\n                                <table>\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td><i className=\"fa fa-map-marker fa- \" ></i></td>\r\n                                            <td>EduSphere HO,<br />\r\n                                                700 N Woodlawn Ave<br />\r\n                                                Bloomington, IN<br />\r\n                                                47408<br />\r\n                                                United States. \r\n                                                <p></p>\r\n                                            </td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td><i className=\"fa fa-phone fa- \" ></i></td>\r\n                                            <td>Phone No : +1 888-0000-8888</td>\r\n                                        </tr>\r\n                                        {/* <tr>\r\n                                            <td><i className=\"fa fa-clock-o fa- \" ></i></td>\r\n                                            <td>\r\n                                                Operation Time:<br />\r\n                                                9.00 am – 5.30 pm (Mon – Sat) <br />\r\n                                            </td>\r\n                                        </tr> */}\r\n                                        <tr>\r\n                                            <td><i className=\"fa fa-envelope fa- \" ></i></td>\r\n                                            <td>Email : support@edusphere.com</td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default ContactUs;","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\AnnouncementIns.js",["224"],"import React, { useEffect, useState } from 'react';\r\nimport {Editor} from '@tinymce/tinymce-react'\r\nimport DOMPurify from 'dompurify';\r\nimport Grid from \"@mui/material/Grid\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Typography from '@mui/material/Typography';\r\nimport { useParams } from \"react-router-dom\";\r\nimport '../styles/announcement.css';\r\nimport Button from '@mui/material/Button';\r\nimport Box from '@mui/material/Box';\r\nimport { List,\r\n  ListItem,\r\n  ListItemText,\r\n  Collapse,\r\n  Divider, } from '@mui/material';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\n\r\nvar baseUrl = \"https://edusphere.vercel.app\"\r\n\r\nconst Announcements = () => {\r\n  const [title, setTitle] = useState('');\r\n  const [description, setDescription] = useState('');\r\n  const [showEditor, setShowEditor] = useState(false);\r\n  const [announcements, setAnnouncements] = useState([]);\r\n  const [expandedIndex, setExpandedIndex] = useState(-1);\r\n  const[isLoading,setIsLoading] = useState(true);\r\n  const [showMessage, setShowMessage] = useState(false);\r\n\r\n  const showContent = (index) => {\r\n    if (expandedIndex === index) {\r\n      setExpandedIndex(-1);\r\n    } else {\r\n      setExpandedIndex(index);\r\n    }\r\n  };\r\n  const {courseId} = useParams();\r\n  const userId = localStorage.getItem('userId');\r\n  const userType = localStorage.getItem('userType');\r\n\r\n  // const handleAnnouncementSubmit = (title, content, date, time) => {\r\n  //   const newAnnouncement = { title, content, date, time };\r\n  //   setAnnouncements([...announcements, newAnnouncement]);\r\n  // };\r\n\r\n  const handlePost = async()=>{\r\n    setShowEditor(false);\r\n    setIsLoading(true);\r\n    console.log(description,title);\r\n    try {\r\n      const response = await fetch(baseUrl + `/api/createAnnouncement/${courseId}`, {\r\n        method: 'POST',\r\n        headers: {\r\n        'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n            \"username\":userId,\r\n            \"title\":title,\r\n            \"description\": description\r\n        }),\r\n      });\r\n      const data = await response.json();\r\n      setShowMessage(true);\r\n      setTimeout(() => {\r\n        setShowMessage(false);\r\n      }, 2000);\r\n      console.log('checl',data);\r\n        } catch (error) {\r\n      // Handle network errors\r\n      console.error('Network error:', error);\r\n     }\r\n     getAnn();\r\n     setIsLoading(false);\r\n  }\r\n\r\n  const getAnn = async()=>{\r\n    console.log(description,title);\r\n    try {\r\n      const response = await fetch(baseUrl + `/api/getAnnouncementByCourse/${courseId}?username=${userId}`, {\r\n        method: 'GET',\r\n      });\r\n      const data = await response.json();\r\n      setAnnouncements(data.Announcements);\r\n      console.log('check',data,userType);\r\n        } catch (error) {\r\n      // Handle network errors\r\n      console.error('Network error:', error);\r\n     }\r\n  }\r\n\r\n  useEffect(()=>{\r\n      getAnn();\r\n      setIsLoading(false);\r\n    },[])\r\n\r\n    useEffect(()=>{\r\n      console.log('ch1',announcements)\r\n    },[announcements])\r\n\r\n\r\n  const AnnouncementCard = ({ announcement, expanded, onReadMore }) => {\r\n    const oneLineDescription = announcement.Description.replace(/<[^>]*>/g, '').substring(0, 100) + '...';\r\n    return (\r\n      <>\r\n      <ListItem onClick={onReadMore}>\r\n        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" width=\"100%\">\r\n          <Box>\r\n            <ListItemText primary={<Typography variant=\"string\" component=\"span\" fontWeight=\"bold\">\r\n                  {announcement.Title}</Typography>}/>\r\n            {!expanded && (\r\n              <Box marginTop=\"8px\">\r\n                <Typography variant=\"body2\" color=\"text.secondary\"> {oneLineDescription}</Typography>\r\n              </Box>)}\r\n          </Box>\r\n          <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\r\n            Posted on: {new Date(announcement.Date).toLocaleString()}\r\n          </Typography>\r\n        </Box>\r\n      </ListItem>\r\n      <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\r\n        <List component=\"div\" disablePadding>\r\n          <ListItem sx={{ paddingTop: \"0px\", marginTop: \"0px\" ,paddingBottom: \"0px\"}}>\r\n            <ListItemText primary={<div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(announcement.Description) }} />} />\r\n          </ListItem>\r\n        </List>\r\n      </Collapse>\r\n      <Divider sx={{ backgroundColor: 'rgba(0, 0, 0, 0.1)' }} />\r\n      </>\r\n    );\r\n  };\r\n  \r\n\r\n const onChangedesc = (desc) => {\r\n  setDescription(desc.target.getContent());\r\n }\r\n\r\n  return (\r\n    <div className=\"announcements-container\">\r\n      {userType.toLowerCase()==='i' && (<div className=\"announcements-header\">\r\n        <button className=\"add-announcement-button\" onClick={() => setShowEditor(!showEditor)}>\r\n          Post Announcement\r\n        </button>\r\n      </div>)}\r\n      { showEditor && (\r\n        <Grid container justifyContent={\"center\"} sx={{marginTop:\"20px\"}}>\r\n          <Grid item xs={8} md={10}>\r\n            <TextField fullWidth label=\"Title\" value={title} onChange={(e)=>setTitle(e.target.value)}/>\r\n          </Grid>\r\n          <Grid item xs={8} md={10} sx={{marginTop:\"10px\",marginBottom:\"10px\"}}>\r\n              <Typography variant=\"string\" component=\"span\" fontWeight=\"bold\" sx={{ marginBottom: \"10px\" }}>Description:</Typography>\r\n              <Editor\r\n              apiKey=\"g6npcs2t24w5uzje2ln7lxmz4nzy4t2tly1wjmj1rfbhhas0\"\r\n              initialValue=\"\"\r\n              init={{\r\n                branding: false,\r\n                height: 200,\r\n                menubar: true,\r\n                plugins:\r\n                  \"print preview paste searchreplace autolink directionality visualblocks visualchars fullscreen link template codesample table charmap hr pagebreak nonbreaking anchor toc insertdatetime advlist lists wordcount imagetools textpattern textcolor\",\r\n                toolbar:\r\n                  \"formatselect | bold italic underline strikethrough | forecolor backcolor blockquote | link | alignleft aligncenter alignright alignjustify | numlist bullist outdent indent | removeformat\",\r\n                image_advtab: true\r\n              }}\r\n              onChange={onChangedesc}\r\n            />\r\n            <Button variant='contained' className=\"add-announcement-button\" onClick={handlePost} sx={{ marginTop: \"20px\" }}>\r\n              Post\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      )}\r\n\r\n      {showMessage && (\r\n            <Grid container justifyContent=\"center\">\r\n              <Typography variant=\"h6\" fontWeight=\"bold\" color=\"success.main\">\r\n                Module created successfully!\r\n              </Typography>\r\n              </Grid>\r\n          )}\r\n\r\n      {announcements && announcements.map((announcement, index) => (\r\n        <AnnouncementCard\r\n          key={index}\r\n          announcement={announcement}\r\n          expanded={expandedIndex === index}\r\n          onReadMore={() => showContent(index)}\r\n        />\r\n      ))\r\n      }\r\n      <Grid container justifyContent=\"center\" m={2}>\r\n        {isLoading && <CircularProgress/>}\r\n\r\n        {announcements.length===0 && <Typography variant='h6' fontStyle='italic' color='text.disabled'>No Announcements</Typography>}\r\n        </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Announcements;\r\n","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\recoverpassword.js",["225"],"import React, { useState,useEffect } from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Alert from \"@mui/material/Alert\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\nimport { useNavigate, useLocation } from \"react-router-dom\";\r\n\r\nvar baseUrl = \"https://edusphere.vercel.app\"\r\n\r\n\r\nconst PasswordRecovery = () => {\r\n  const [password, setPassword] = useState(\"\");\r\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n  const [passwordError, setPasswordError] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n  const [successMessage, setSuccessMessage] = useState(\"\");\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n\r\n\r\n  useEffect(() => {\r\n  }, []);\r\n\r\n  const handleSubmit = async () => {\r\n    if (password !== confirmPassword) {\r\n      setErrorMessage(\"Passwords do not match.\");\r\n      return;\r\n    } else if (password.length<8) {\r\n        setErrorMessage(\"Passowrd should be atleast 8 characters long\");\r\n        return;\r\n    }\r\n\r\n    const id = new URLSearchParams(location.search).get(\"id\");\r\n    const username = new URLSearchParams(location.search).get(\"username\");\r\n\r\n    setIsLoading(true);\r\n    setErrorMessage(\"\");\r\n    setSuccessMessage(\"\");\r\n\r\n    const API_ENDPOINT = baseUrl + `/api/recover_confirm/?id=${id}&username=${username}`;\r\n\r\n    try {\r\n      const response = await fetch(API_ENDPOINT, {\r\n        method: \"PUT\",\r\n        body: JSON.stringify({\r\n          password: password,\r\n        }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      console.log(data);\r\n      if (response.ok) {\r\n        setIsLoading(false);\r\n        if (data.Status === 'Success') {\r\n            setSuccessMessage(\"Your password has been successfully reset.\");\r\n            navigate('/login',{ state: { message: 'Your password has been successfully reset.Please login to continue.' } });\r\n        }\r\n        else {\r\n        setErrorMessage(\"The link is not valid!\");\r\n        }\r\n        \r\n      } else {\r\n        setIsLoading(false);\r\n        setErrorMessage(data.Status || \"An error occurred. Please try again.\");\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      setIsLoading(false);\r\n      setErrorMessage(\"A network error occurred. Please try again.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"body\">\r\n        <h2 className=\"center\">Password Recovery</h2>\r\n        {errorMessage && (\r\n          <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n            {errorMessage}\r\n          </Alert>\r\n        )}\r\n        {successMessage && (\r\n          <Alert severity=\"success\" sx={{ mb: 2 }}>\r\n            {successMessage}\r\n          </Alert>\r\n        )}\r\n        <Box\r\n          component=\"form\"\r\n          sx={{\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            \"& > :not(style)\": { m: 1 },\r\n          }}\r\n        >\r\n          <TextField\r\n            fullWidth\r\n            label=\"New Password\"\r\n            id=\"new-password\"\r\n            variant=\"outlined\"\r\n            type=\"password\"\r\n            sx={{ width: \"50%\" }}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          />\r\n          <TextField\r\n            fullWidth\r\n            label=\"Confirm New Password\"\r\n            id=\"confirm-password\"\r\n            variant=\"outlined\"\r\n            type=\"password\"\r\n            sx={{ width: \"50%\" }}\r\n            onChange={(e) => setConfirmPassword(e.target.value)}\r\n            error={passwordError}\r\n          />\r\n          <Button variant=\"contained\" onClick={handleSubmit} disabled={passwordError}>\r\n            Reset Password\r\n          </Button>\r\n        </Box>\r\n        {isLoading && (\r\n          <Box className=\"center\">\r\n            <CircularProgress />\r\n          </Box>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PasswordRecovery;\r\n","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\admin.js",["226","227","228","229"],"import React, { useState, useEffect } from 'react';\r\nimport Grid from '@mui/material/Grid';\r\nimport Box from '@mui/material/Box';\r\nimport Button from \"@mui/material/Button\";\r\nimport Card from \"@mui/material/Card\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\r\nimport Collapse from \"@mui/material/Collapse\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport CheckIcon from \"@mui/icons-material/Check\";\r\nimport DOMPurify from 'dompurify';\r\n\r\nvar baseUrl = \"https://edusphere.vercel.app\"\r\n\r\n\r\nconst AdminDashboard = () => {\r\n  const [courses, setCourses] = useState([]);\r\n  const adminid = localStorage.getItem('userId');\r\n  const userType = localStorage.getItem(\"userType\");\r\n  const [showMessage, setShowMessage] = useState(false);\r\n  const [approve,setApprove] = useState(true);\r\n\r\n  const[coursenm, setCoursenm] = useState();\r\n\r\n  const [expanded, setExpanded] = useState({});\r\n  const handleExpandClick = (courseId) => {\r\n    setExpanded((prevExpanded) => ({\r\n      ...prevExpanded,\r\n      [courseId]: !prevExpanded[courseId],\r\n    }));\r\n      };\r\n\r\n  const getAllCourses = async () => {\r\n\r\n    try {\r\n      const response = await fetch(baseUrl + '/api/admin-course-view', {\r\n        method: 'GET',\r\n      });\r\n      const data = await response.json();\r\n      if (data.Status === \"Success\") {\r\n        setCourses(data.response);\r\n        console.log(data.response);\r\n      }\r\n      else {\r\n        console.log('failed');\r\n        console.log(data.response);\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getAllCourses();\r\n  }, []);\r\n\r\n  const handleClick = async ({course,isApproved})=>{\r\n    console.log(course,isApproved);\r\n    setCoursenm(course.courseName);\r\n    try {\r\n      const response = await fetch(baseUrl + '/api/admin-approve-course', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({\r\n              \"userId\":adminid,\r\n              \"courseId\": course.courseId,\r\n              \"decision\": isApproved ? \"approve\" : \"reject\"\r\n          }),\r\n      });\r\n      console.log('checl')\r\n      const data = await response.json();\r\n      if (data.Status === \"Success\") {\r\n        console.log(data.response);\r\n        getAllCourses();\r\n        setShowMessage(isApproved ? true : false);\r\n        setTimeout(() => {\r\n          setShowMessage(false);\r\n        }, 2000);\r\n        }\r\n        else {\r\n          console.log('failed');\r\n          console.log(data.response);\r\n        }\r\n      } catch (error) {\r\n        console.error(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box mt={3} ml={3} mr={3} >\r\n      <Grid container justifyContent=\"space-between\">\r\n        <Grid item>\r\n      <Typography variant='string' fontWeight=\"bold\">Admin View - Approve Courses</Typography>\r\n      </Grid>\r\n      <Grid item>\r\n      <a href='https://edusphere.vercel.app/admin/'  target='_blank' rel=\"noopener noreferrer\">Click here to go to Admin Panel</a>\r\n      </Grid>\r\n      </Grid>\r\n      <Grid container spacing={1} mt={4} >\r\n      {showMessage && (\r\n          <Grid container justifyContent=\"center\">\r\n            <Typography variant=\"h6\" fontWeight=\"bold\" color=\"success.main\">\r\n                {coursenm} approved successfully!\r\n            </Typography>\r\n            </Grid>\r\n        )}\r\n        {courses && (courses.map((course) => (\r\n          <Card sx={{ width: \"100%\", mb: 1, backgroundColor: \"#f5f5f5\" }}>\r\n          <CardContent>\r\n            <Grid container justifyContent=\"space-between\" alignItems=\"center\">\r\n              <Grid item>\r\n                <Typography variant=\"h6\" >\r\n                  {course.courseName}\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item>\r\n              <Button variant=\"outlined\" color=\"primary\" sx={{borderColor: \"primary.main\", textTransform: \"none\",marginRight: 1,}}\r\n                onClick={()=>handleClick({course: course, isApproved: true})}>\r\n                Approve\r\n              </Button>\r\n              <Button variant=\"outlined\" color=\"primary\" sx={{borderColor: \"primary.main\", textTransform: \"none\",marginRight: 1,}}\r\n                onClick={()=>handleClick({course: course, isApproved: false})}>\r\n                Reject\r\n              </Button>\r\n\r\n                <IconButton\r\n                  onClick={() => handleExpandClick(course.courseId)}\r\n                  aria-expanded={expanded[course.courseId]}\r\n                  aria-label=\"show more\"\r\n                >\r\n                  <ExpandMoreIcon />\r\n                </IconButton>\r\n              </Grid>\r\n            </Grid>\r\n          </CardContent>\r\n          <Collapse in={expanded[course.courseId]} timeout=\"auto\" unmountOnExit>\r\n            <CardContent>\r\n              <Typography variant=\"subtitle1\" color=\"text.secondary\">\r\n                Description:\r\n              </Typography>\r\n              <Typography paragraph> <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(course.courseDescription) }}/></Typography>\r\n              <Typography variant=\"subtitle1\" color=\"text.secondary\">\r\n                Professor:\r\n              </Typography>\r\n              <Typography paragraph>{course.professorName}</Typography>\r\n            </CardContent>\r\n          </Collapse>\r\n        </Card>\r\n        )))}\r\n\r\n        {(courses.length === 0) && (\r\n          <Grid container justifyContent=\"center\" alignItems=\"center\" style={{ height: '100%' }}>\r\n            <Typography variant=\"h6\" fontStyle=\"italic\" align=\"center\"\r\n              color=\"text.disabled\"> No courses to approve </Typography>\r\n          </Grid>\r\n        )}\r\n      </Grid>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default AdminDashboard;\r\n","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\HomeIns.js",["230","231"],"import React, { useState,useEffect } from 'react';\r\nimport '../styles/announcement.css';\r\nimport { useParams } from \"react-router-dom\";\r\nimport {Editor} from '@tinymce/tinymce-react'\r\nimport DOMPurify from 'dompurify';\r\nimport Box from '@material-ui/core/Box'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport Typography from '@mui/material/Typography';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\n\r\nvar baseUrl = \"https://edusphere.vercel.app\"\r\n\r\n\r\nconst CourseHome = (props) => {\r\n  console.log(props.prop);\r\n  const [title, setTitle] = useState('');\r\n  const [content, setContent] = useState('');\r\n  const {courseId} = useParams();\r\n  const courseIdInt = parseInt(courseId, 10);\r\n  const [courseinfo,setCourseinfo] = useState();\r\n  const [editorContent, setEditorContent] = useState(\"\");\r\n  const [isLoading,setIsLoading] = useState(true);\r\n  const [showMessage, setShowMessage] = useState(false);\r\n\r\n  const userId = localStorage.getItem(\"userId\");\r\n  const userType = localStorage.getItem(\"userType\");\r\n\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    if (props.prop === 'syllabus') {\r\n      setTitle('Course Syllabus');\r\n      setContent('');\r\n    }\r\n  }, [props.prop]);\r\n\r\n\r\n  const getdata = async ()=>{\r\n    try {\r\n      const response = await fetch(baseUrl + `/api/my_courses?username=${userId}`, {\r\n        method: 'GET',\r\n      });\r\n      const data = await response.json();\r\n      setCourseinfo(data.requestedCourses.find((enrolledCourse) => enrolledCourse.courseId === courseIdInt));\r\n  \r\n      }\r\n      catch{\r\n        console.log('failed');}\r\n    }\r\n\r\n  useEffect( () => {\r\n    getdata();\r\n}, []);\r\n\r\n\r\nuseEffect(() => {\r\n  \r\n  if (courseinfo){\r\n    if (props.prop !== 'syllabus') {\r\n      setTitle(`Welcome to ${courseinfo.courseName}`);\r\n      setContent(courseinfo.courseDescription);\r\n      console.log(courseinfo);\r\n    } else {\r\n  setContent(courseinfo.courseSyllabus);\r\n  console.log('syllabys');\r\n  }\r\n}\r\nsetIsLoading(false);\r\n}, [courseinfo]);\r\n\r\n\r\n  const [editMode, setEditMode] = useState(false);\r\n  \r\n  const handleEditClick = () => {\r\n    setEditMode(!editMode);\r\n  };\r\n\r\n\r\n  const pushdata = async() =>{\r\n    setIsLoading(true);\r\n    try {\r\n      const response = await fetch(baseUrl +'/api/create-update-course', {\r\n        method: 'POST',\r\n        headers: {\r\n        'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n            \"username\":userId,\r\n            \"name\": courseinfo.courseName,\r\n            \"masterCourseId\": courseinfo.masterCourseId,\r\n            \"shortName\": courseinfo.shortName,\r\n            \"description\": props.prop === 'syllabus' ? courseinfo.courseDescription : editorContent,\r\n            \"syllabus\": props.prop === 'syllabus' ? editorContent : courseinfo.courseSyllabus,\r\n            \"modules\":courseinfo.modules,\r\n            \"skillJson\":courseinfo.skillJson,\r\n            \"cLevel\":courseinfo.cLevel,\r\n            \"startDate\":courseinfo.startDate.split(\"T\")[0],\r\n            \"endDate\":courseinfo.endDate.split(\"T\")[0],\r\n        }),\r\n      });\r\n      const data = await response.json();\r\n      setShowMessage(true);\r\n      setTimeout(() => {\r\n        setShowMessage(false);\r\n      }, 2000);\r\n      console.log('checl',data);\r\n\r\n    } catch (error) {\r\n      // Handle network errors\r\n      console.error('Network error:', error);\r\n    }\r\n    getdata();\r\n    setIsLoading(false);\r\n  }\r\n\r\n  const handleSaveClick = () => {\r\n    setEditMode(false);\r\n    pushdata();\r\n  };\r\n\r\n  const onChangedesc=(e)=>{\r\n    setEditorContent(e.target.getContent());\r\n  }\r\n\r\n\r\n  return (\r\n    <Box>\r\n      <Grid container spacing={2} justifyContent=\"space-between\" sx={{ marginBottom: \"10px\" }}>\r\n        <Grid item>\r\n          <h2>{title}</h2>\r\n        </Grid>\r\n        { userType.toLowerCase() === 'i' &&\r\n        (<Grid item>\r\n        <IconButton onClick={() => handleEditClick()} sx={{ marginTop: \"15px\" }}>\r\n              <EditIcon />\r\n            </IconButton>\r\n        </Grid>)}\r\n      </Grid>\r\n      {isLoading && (<Grid container justifyContent=\"center\">\r\n          < CircularProgress /></Grid>)} \r\n      {showMessage && (\r\n        <Grid container justifyContent=\"center\">\r\n          <Typography variant=\"h6\" fontWeight=\"bold\" color=\"success.main\">\r\n            Content updated successfully!\r\n          </Typography>\r\n          </Grid>\r\n      )}\r\n      <Grid container spacing={12} mt={0} sx={{ marginBottom: \"10px\" }}>\r\n      {!editMode && (\r\n        <Grid item sx={{ marginBottom: \"10px\" ,p:2}}>\r\n          <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(content) }}/>\r\n        </Grid>)}\r\n\r\n      {editMode && (\r\n          <Grid  container md={12} xs={10} sm={12} justifyContent='center' alignItems='center'>\r\n          <Editor\r\n          apiKey=\"g6npcs2t24w5uzje2ln7lxmz4nzy4t2tly1wjmj1rfbhhas0\"\r\n          initialValue={content}\r\n          init={{\r\n            branding: false,\r\n            height: 300,\r\n            menubar: true,\r\n            plugins:\r\n              \"print preview paste searchreplace autolink directionality visualblocks visualchars fullscreen link template codesample table charmap hr pagebreak nonbreaking anchor toc insertdatetime advlist lists wordcount imagetools textpattern textcolor\",\r\n            toolbar:\r\n              \"formatselect | bold italic underline strikethrough | forecolor backcolor blockquote | link | alignleft aligncenter alignright alignjustify | numlist bullist outdent indent | removeformat\",\r\n            image_advtab: true\r\n          }}\r\n          onChange={onChangedesc}/>\r\n\r\n          <button className=\"save-button\" onClick={handleSaveClick}>\r\n          Save\r\n          </button>\r\n        </Grid>\r\n      )}\r\n      </Grid>\r\n\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default CourseHome;\r\n\r\n\r\n","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\entityassignment.js",["232","233","234","235"],"import React from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport Grid from '@mui/material/Grid';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { useState,useEffect } from 'react';\r\nimport { useRef } from 'react';\r\nimport { useParams,Link } from \"react-router-dom\";\r\nimport FileUploadOutlinedIcon from '@mui/icons-material/FileUploadOutlined';\r\nimport DOMPurify from 'dompurify';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\n\r\nvar baseUrl = \"https://edusphere.vercel.app\"\r\n// var baseUrl = \"http://127.0.0.1:8000/\"\r\n\r\n\r\nconst AssignmentDetails = () => {\r\n    const location = useLocation();\r\n    // const assignment = location.state?.assignment;\r\n    const fileInputRef = useRef(null);\r\n    const userId = localStorage.getItem('userId');\r\n    const {courseId,assignmentId} = useParams();\r\n    const userType = localStorage.getItem('userType');\r\n    const [submitted, setSubmitted] = useState(false);\r\n    const [fileName, setFileName] = useState('');\r\n    const[isLoading,setIsLoading] = useState(false);\r\n    \r\n    const assignment = location.state.assignment;\r\n    console.log('ch',assignment);\r\n    \r\n    const handleFileChange = (e) => {\r\n      console.log(e.target.files[0]);\r\n      setFileName(e.target.files[0].name);\r\n    };\r\n    \r\n\r\n    const handleSubmit = async (event) =>{\r\n        setIsLoading(true);\r\n        event.preventDefault();\r\n        const file = fileInputRef.current.files[0];\r\n        const formData = new FormData();\r\n        formData.append('file', file);\r\n        formData.append('username', userId);\r\n        formData.append('courseid', courseId);\r\n        formData.append('assignmentid', assignment.assingnmentNumber);\r\n\r\n        for (const [key, value] of formData.entries()) {\r\n          console.log(`${key}: ${value}`);\r\n        }\r\n  \r\n        try {\r\n          const response = await fetch( baseUrl+'/api/student_upload_assignment', {\r\n            method: 'POST',\r\n            body: formData,\r\n          });\r\n          const data = await response.json();\r\n          console.log('checl',data);\r\n          setSubmitted(true);\r\n          setIsLoading(false);\r\n        } catch (error) {\r\n          // Handle network errors\r\n          console.error('Network error:', error);\r\n        }\r\n      }\r\n\r\n\r\n  return (\r\n    <>\r\n    <Box display={isLoading?'none':'flex'}>\r\n    {assignment && (<Box>\r\n      <Grid container spacing={4} justifyContent=\"space-between\"  alignItems=\"center\" sx={{ marginBottom: \"0px\",marginTop:0.5 }}>\r\n        <Grid item md={10}>\r\n          <Typography variant='h6' fontWeight=\"bold\">{assignment.assingnmentTitle}</Typography>\r\n          <Typography variant=\"body2\" color='text.secondary' >Due: {new Date(assignment.dueDate).toLocaleString()}</Typography>\r\n        </Grid>\r\n        <Grid item xs={12} sm={6} md={2}>\r\n            <Typography variant=\"string\" color='text.primary' fontWeight=\"bold\">Possible Points:{assignment.maxPoints}</Typography>\r\n        </Grid>\r\n       </Grid>\r\n        <Grid container marginTop={2}>\r\n            <Grid item xs={12} md={12}>\r\n                <Typography variant=\"string\" fontWeight=\"bold\">Description:</Typography>\r\n            </Grid>\r\n            <Grid item md={12} sx={{marginTop:0}}>\r\n                <Typography variant='string' >{<div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(assignment.description) }}/>}</Typography>\r\n            </Grid>\r\n            <Grid item md={12}>\r\n              <Box display=\"flex\" alignItems=\"center\">\r\n                <Typography variant=\"string\" fontWeight=\"bold\">\r\n                  File Link:\r\n                </Typography>\r\n                <a href={assignment.assignmentLink} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                  <Typography variant=\"string\" sx={{ marginLeft: 1 }}>\r\n                    Link\r\n                  </Typography>\r\n                </a>\r\n              </Box>\r\n            </Grid>\r\n\r\n        {userType.toLowerCase()==='s' && (\r\n        <Grid item xs={12} md={12} marginTop={2}>\r\n        <Typography variant=\"string\" fontWeight=\"bold\">\r\n          Submission:\r\n        </Typography>\r\n        <Box mt={2}>\r\n          <form\r\n            id=\"assignment-form\"\r\n            encType=\"multipart/form-data\"\r\n            onSubmit={(event) => handleSubmit(event)}\r\n          >\r\n            <Box display=\"flex\" alignItems=\"center\">\r\n              <Button\r\n                variant=\"outlined\"\r\n                component=\"label\"\r\n                startIcon={<FileUploadOutlinedIcon />}\r\n              >\r\n                {submitted ? 'File Submitted' : 'Select File'}\r\n                <input\r\n                  ref={fileInputRef}\r\n                  hidden\r\n                  accept=\".doc,.docx,.pdf,.txt\"\r\n                  type=\"file\"\r\n                  onChange={handleFileChange}\r\n                />\r\n              </Button>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                type=\"submit\"\r\n                sx={{ marginLeft: 1 }}\r\n                disabled={submitted}\r\n              >\r\n                {submitted ? 'Submitted' : 'Submit'}\r\n              </Button>\r\n            </Box>\r\n            {fileName && !submitted && (\r\n              <Typography variant=\"body1\" sx={{ marginTop: 1 }}>\r\n                File: {fileName}\r\n              </Typography>\r\n            )}\r\n          </form>\r\n        </Box>\r\n      </Grid>\r\n      \r\n        )}\r\n      </Grid>\r\n    </Box>)}\r\n    </Box>\r\n    <Box justifyContent=\"center\" display=\"flex\">\r\n    {isLoading && <CircularProgress/>}</Box>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AssignmentDetails;\r\n","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\Assignment.js",["236","237","238","239"],"import React from 'react'\r\nimport '../styles/assignment.css';\r\nimport { useState,useEffect } from 'react';\r\nimport '../styles/assignment.css';\r\nimport CreateAssignment from './CreateAssignment';\r\nimport { useParams } from 'react-router-dom';\r\n// import AssignmentDetail from './entityassignment';\r\nimport { List, ListItem, ListItemText, Typography } from '@mui/material';\r\nimport Box from '@mui/material/Box'\r\nimport Divider from '@mui/material/Divider'\r\nimport Card from '@mui/material/Card'\r\nimport Grid from '@mui/material/Grid'\r\nimport CardContent from '@mui/material/CardContent'\r\nimport { useNavigate } from 'react-router-dom';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport Button from '@mui/material/Button';\r\nimport AddRoundedIcon from '@mui/icons-material/AddRounded'\r\n\r\nvar baseUrl = \"https://edusphere.vercel.app\"\r\n\r\n\r\nconst Assignment = () => {\r\n    const [create, setCreate] = useState(false);\r\n    const {courseId} = useParams();\r\n\r\n    const [assignments, setAssignments] = useState([]);\r\n    const userId = localStorage.getItem('userId');\r\n    const userType = localStorage.getItem('userType');\r\n    const navigate = useNavigate();\r\n    const [isLoading,setIsLoading] = useState(true);\r\n    const [showMessage, setShowMessage] = useState(false);\r\n\r\n    const handleClick = (assignment) => {\r\n      navigate(`./${assignment.assingnmentNumber}`, { state: { assignment } });\r\n    };\r\n    \r\n    const getAssignments = async()=>{\r\n      try {\r\n        const response = await fetch(baseUrl + `/api/get_professor_created_assignment?username=${userId}&courseId=${courseId}`, {\r\n          method: 'GET',\r\n        });\r\n        const data = await response.json();\r\n        setAssignments(data.response);\r\n        console.log(data);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    }\r\n\r\n    useEffect(()=>{\r\n      getAssignments();\r\n    },[]);\r\n\r\n\r\n    const AssignmentsList = ({ assignments }) => {\r\n      return (\r\n        <List>\r\n          {assignments.map((assignment, index) => (\r\n            <React.Fragment key={index}>\r\n              <ListItem >\r\n                <ListItemText\r\n                  primary={\r\n                    <Typography\r\n                      variant=\"body2\"\r\n                      fontWeight=\"bold\"\r\n                      marginBottom={1}\r\n                      onClick={() => handleClick(assignment)}\r\n                      style={{ textDecoration: 'none', cursor: 'pointer' }}\r\n                    >\r\n                      {assignment.assingnmentTitle}\r\n                    </Typography>\r\n                  }\r\n                  secondary={\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                      <strong>Due:</strong> {assignment.dueDate} &nbsp;| &nbsp;\r\n                      <strong>Points:</strong> {assignment.maxPoints}\r\n                    </Typography>}/>\r\n              </ListItem>\r\n              {index < assignments.length - 1 && (\r\n                <Divider sx={{ marginBottom:0,backgroundColor: 'rgba(0, 0, 0, 0.3)' }}  />\r\n              )}\r\n            </React.Fragment>\r\n          ))}\r\n        </List>\r\n      );\r\n    };\r\n    \r\n  \r\n    const BaseAssignment = () => {\r\n      return (\r\n          <Box className=\"assign-main\" marginTop={2} marginRight={2}>\r\n            { userType.toLowerCase() === 'i' &&\r\n            (<Box className=\"create-btn\" display=\"flex\" justifyContent=\"flex-end\">\r\n              <Button variant='contained'startIcon={<AddRoundedIcon/>} onClick={() => (setCreate(!create))}> Create </Button>\r\n            </Box>)}\r\n\r\n            {showMessage && (\r\n              <Grid container justifyContent=\"center\">\r\n                <Typography variant=\"h6\" fontWeight=\"bold\" color=\"success.main\">\r\n                 Assignment Created Successfully!\r\n                </Typography>\r\n                </Grid>\r\n            )}\r\n\r\n          <Grid container>\r\n            <Grid item md={11} xs={12}>\r\n              {create && <CreateAssignment courseid={courseId} setCreate={setCreate} setShowMessage={setShowMessage} getAssignments={getAssignments}/>}\r\n            </Grid>\r\n            <Grid item md={10}  xs={12}>\r\n              <Card variant=\"outlined\"  sx={{mt: 2, p:0.5, background: '#f5f5f5',\r\n              borderRadius: 1, border:'1px solid rgba(0, 0, 0, 0.3)'}}>\r\n                <CardContent >\r\n                  <Typography variant=\"string\" fontWeight=\"bold\">\r\n                    Assignments\r\n                  </Typography>\r\n                  </CardContent>\r\n              </Card>\r\n              <Card sx={{\r\n                borderLeft: '1px solid rgba(0, 0, 0, 0.3)',\r\n                borderRight: '1px solid rgba(0, 0, 0, 0.3)',\r\n              }}>\r\n                  <Divider sx={{ marginTop: 0 }} />\r\n                    <AssignmentsList assignments={assignments} />\r\n              </Card>\r\n            </Grid>\r\n          </Grid>\r\n          </Box>\r\n          \r\n    );\r\n\r\n    };\r\n\r\n    return (\r\n      \r\n      <React.Fragment>\r\n        <BaseAssignment/>\r\n      </React.Fragment>\r\n    );\r\n    };\r\n    \r\nexport default Assignment;\r\n    ","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\assets\\Home.js",["240","241","242","243","244"],"C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\assets\\CoursesPage.js",["245"],"import { useState, useEffect } from \"react\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport CourseCardBrowse from \"./CourseCardBrowse\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Box from '@mui/material/Box'\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\nvar baseUrl = \"https://edusphere.vercel.app\"\r\n\r\n\r\nfunction CoursesPage() {\r\n  const [selectedCourse, setSelectedCourse] = useState(null);\r\n  const [courses, setCourses] = useState([]);\r\n  const [isLoading,setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    async function getCourses() {\r\n      try {\r\n        const response = await fetch(baseUrl + `/api/my_courses?username=${localStorage.getItem(\"userId\")}`, {\r\n          method: 'GET',\r\n        });\r\n        const data = await response.json();\r\n        setCourses(data.requestedCourses);\r\n        console.log(data);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    }\r\n    getCourses(); \r\n    setIsLoading(false);\r\n  }, []);\r\n\r\n  useEffect(()=>{\r\n    console.log(courses);\r\n  },[courses]);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const handleCourseDetailsClick = (course) => {\r\n    localStorage.setItem('courseTitle', course.courseName);\r\n    navigate(`/course/${course.courseId}`);\r\n    // setSelectedCourse(course);\r\n  };\r\n\r\n  const handleBackClick = () => {\r\n    setSelectedCourse(null);\r\n  };\r\n\r\n  // if (courses.length === 0) {\r\n  //   return <h1>Welcome to EduSphere! Please enroll in courses</h1>\r\n  // }\r\n\r\n\r\n\r\n  if (selectedCourse) {\r\n    return (\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12}>\r\n          <Typography variant=\"h4\">{selectedCourse.courseName}</Typography>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <Typography variant=\"body1\" >{selectedCourse.courseDescription.p1}</Typography>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <button onClick={handleBackClick}>Back to Courses</button>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n\r\n  return (\r\n    // <Box>\r\n    <Grid container spacing={4} sx={{marginTop:1,marginLeft:1, paddingRight: \"150px\" }}>\r\n      {courses.length===0 && <Typography variant='h4' fontWeight=\"bold\" sx={{margin:2}}>Welcome to EduSphere! Please enroll in courses</Typography>}\r\n      {courses.map((course) => (\r\n        <Grid item key={course.courseId} xs={6} sm={6} md={4}>\r\n          <CourseCardBrowse\r\n            courseId={course.courseId}\r\n            courses={courses}\r\n            onDetailsClick={handleCourseDetailsClick}\r\n          />\r\n          \r\n        </Grid>\r\n      ))}\r\n      {isLoading && <CircularProgress/>}\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default CoursesPage;\r\n","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\SignUp.js",["246"],"import React, {useState,useEffect} from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Box from '@mui/material/Box';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport Select from '@mui/material/Select';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport Typography from '@mui/material/Typography';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport Grid from '@mui/material/Grid';\r\nimport Alert from '@mui/material/Alert';\r\nimport Card from '@mui/material/Card';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport Skeleton from '@mui/material/Skeleton';\r\nimport '../styles/login.css';\r\nimport '../styles/common.css';\r\n\r\n\r\nvar baseUrl = \"https://edusphere.vercel.app\"\r\n\r\nconst SignUp = (props) => {\r\n\r\n  const [fname, setFname] =  useState('');\r\n  const [lname, setLname] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [rpassword, setRpassword] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [selectedRole, setSelectedRole] = useState(\"\");\r\n  const [passwordError, setPasswordError] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    \r\n  }, []);\r\n\r\n  const handleRoleChange = (event) => {\r\n    setSelectedRole(event.target.value);\r\n    console.log(selectedRole);\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (password !== rpassword) {\r\n        setPasswordError(true);\r\n        setErrorMessage('Passwords do not match');\r\n      } else {\r\n        setPasswordError(false);\r\n        setErrorMessage('');\r\n        setIsLoading(true);\r\n        try {\r\n          console.log(selectedRole);\r\n          const response = await fetch(baseUrl + '/signup/', {\r\n            method: 'POST',\r\n            headers: {\r\n            'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n              fname: fname,\r\n              lname: lname,\r\n              email: email,\r\n              password: password,\r\n              type: selectedRole,\r\n            }),\r\n          });\r\n      \r\n          const data = await response.json();\r\n      \r\n          if (data.msg === 'This email is already registered') {\r\n              setIsLoading(false);\r\n              setErrorMessage('This email is already registered.Please Login!');\r\n              navigate('/login', { state: { message: 'This email is already registered.Please Login' } });\r\n            }\r\n          else if (data.Status === 'Success') {\r\n              setIsLoading(false);\r\n              navigate('/login',{ state: { message: 'Registration Successful.Please Login' } }); }\r\n            else {\r\n              setIsLoading(false);\r\n              setErrorMessage('An error occurred. Please try again.');\r\n            }\r\n          } catch (error) {\r\n          // Handle network errors\r\n          console.error('Network error:', error);\r\n          setIsLoading(false);\r\n          setErrorMessage('A network error occurred. Please try again.');\r\n        }\r\n      }\r\n    \r\n    \r\n  };\r\n  \r\n  return (\r\n    <Box display = {isLoading ? 'none' : 'flex'}\r\n      sx={{justifyContent: 'center',alignItems: 'center',  minHeight:\"60vh\"}}>\r\n    <Grid container justifyContent=\"center\" alignContent=\"center\">\r\n      <Grid item xs={12} sm={10} md={8} lg={6}>\r\n      <Card sx={{mt:10,alignItems: 'center',p: 2,\r\n         boxShadow: '0 0 70px rgba(0, 0, 0, 0.1)',\r\n          border: '2px solid rgba(0, 0, 0, 0.1)',\r\n          backgroundColor: 'rgba(255, 255, 255, 0.9)',\r\n          borderRadius: 2,\r\n        }}>\r\n\r\n        <CardContent sx={{ width: '100%' }}>\r\n          <Grid container>\r\n            <Grid item md={12}>\r\n              {errorMessage && (\r\n                      <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n                        {errorMessage}\r\n                      </Alert>\r\n                    )}\r\n              <Typography variant=\"body1\" fontWeight=\"bold\" textAlign=\"center\" mb={2}>\r\n                Create Account\r\n              </Typography>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            <Grid container spacing={3} mb={2}>\r\n              <Grid item md={6} xs={12}>\r\n                  <TextField fullWidth variant='outlined' label='First Name' value={fname} \r\n                  onChange={e => setFname(e.target.value)}/>\r\n              </Grid>\r\n              <Grid item md={6} xs={12}>\r\n                <TextField fullWidth variant='outlined' label='Last Name' value={lname}\r\n                    onChange={e => setLname(e.target.value)}/>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            <Grid container spacing={3} mb={2}>\r\n              <Grid item md={6} xs={12}>\r\n                  <TextField fullWidth variant='outlined' label='Email' onChange={e => setEmail(e.target.value)}/>\r\n              </Grid>\r\n              <Grid item md={6} xs={12}>\r\n                <FormControl fullWidth >\r\n                    <InputLabel>Role</InputLabel>\r\n                    <Select sx = {{textAlign:'left'}}\r\n                      fullWidth\r\n                      label=\"Role\"\r\n                      value={selectedRole}\r\n                      onChange={handleRoleChange}>\r\n                      \r\n                      <MenuItem value=\"S\">Student</MenuItem>\r\n                      <MenuItem value=\"I\">Instructor</MenuItem>\r\n                    </Select>\r\n                  </FormControl>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            <Grid container spacing={3} mb={2}>\r\n              <Grid item md={6} xs={12}>\r\n                  <TextField fullWidth label=\"Password\" variant=\"outlined\"\r\n                      type=\"password\"\r\n                      onChange={e => setPassword(e.target.value)}\r\n                      error={passwordError}/>\r\n              </Grid>\r\n              <Grid item md={6} xs={12}>\r\n              <TextField fullWidth label=\"Repeat Password\" variant=\"outlined\"  type=\"password\"\r\n                      onChange={e => setRpassword(e.target.value)}\r\n                      error={passwordError}\r\n                    />\r\n              </Grid>\r\n            </Grid>\r\n\r\n            <Grid container justifyContent={'center'}>\r\n              <Button variant=\"contained\" onClick={handleSubmit} disabled={passwordError}\r\n              sx={{ mt: 2, backgroundColor: 'primary.main', color: 'white' }}>\r\n              Sign Up\r\n            </Button>\r\n            </Grid>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {isLoading && (\r\n        <Box\r\n          sx={{\r\n            position: 'fixed',\r\n            top: 0,\r\n            left: 0,\r\n            right: 0,\r\n            bottom: 0,\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n          }}\r\n        >\r\n          <CircularProgress />\r\n        </Box>\r\n      )}\r\n      </Grid>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default SignUp;","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\dashboard.js",["247","248","249","250","251","252"],"C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\horizontalnavIns.js",[],"C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\navigations\\MenuBar.js",["253"],"import React from 'react'\r\n\r\nimport styles from './MenuBar.module.css'\r\nimport EduSphereLogo from '../images/logo/EduSphere.png'; // with import\r\n\r\n\r\nconst MenuBar = () => {\r\n    return (\r\n        <nav className={styles.header}>\r\n            <div className={styles[\"nav-wrapper\"]}>\r\n                <a className={styles.logo} href='/'> \r\n                    {/* <img src={EduSphereLogo} alt=\"EduSphere\" height={100} />  */}\r\n                    EduSphere\r\n                </a>\r\n                <input className={styles[\"menu-btn\"]} type=\"checkbox\" id=\"menu-btn\"/>\r\n                <label className={styles[\"menu-icon\"]} htmlFor=\"menu-btn\"><span className=\"navicon\"></span></label>\r\n\r\n                <ul className={styles.menu}>\r\n                    <li><a href=\"/\">Home</a></li>\r\n                    <li><a href=\"/AboutUs\">About Us</a></li>\r\n                    <li><a href=\"/ContactUs\">Contact Us</a></li>    \r\n                    <li><a href='/login'>Login</a></li>\r\n                    <li><a href='/signup'>Sign Up</a></li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default MenuBar;","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\misc\\Header.js",["254"],"import React from 'react'\r\nimport { Link } from \"react-router-dom\"\r\nimport './Header.css'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <header className=\"bg-image\">\r\n                <div className=\"bg-container\">\r\n                    <h1>Empowering Education, Simplifying Learning</h1>\r\n                    <h2><span style={{fontWeight:\"500\"}}>EduSphere</span> - Your Ultimate Learning Management System</h2>\r\n                    \r\n                    {/* <h2>Placeholder for home page header</h2> */}\r\n                    {/* <Link to=\"/\">Demo</Link> */}\r\n                </div>\r\n            </header>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Header;","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\misc\\Testimonials.js",[],"C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\navigations\\Footer.js",[],"C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\misc\\Pricing.js",[],"C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\assets\\CourseCardBrowse.js",["255","256","257","258"],"import Card from \"@mui/material/Card\";\r\nimport CardMedia from \"@mui/material/CardMedia\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport CardActions from \"@mui/material/CardActions\";\r\nimport Button from \"@mui/material/Button\";\r\nimport ButtonBase from \"@mui/material/ButtonBase\";\r\nimport { Link } from \"react-router-dom\";\r\nimport DOMPurify from 'dompurify';\r\nimport Grid from '@mui/material/Grid'\r\nimport Box from '@mui/material/Box';\r\n\r\nexport default function CourseCardBrowse({ courseId, courses, onDetailsClick }) {\r\n  const course = courses.find(course => course.courseId === courseId);\r\n\r\n  const images = ['course1.jpg', 'course2.jpg', 'course3.jpg', 'course4.jpg', 'course5.jpg', 'course6.jpg', 'course7.jpg', 'course8.jpg', 'course9.jpg']; // add more file names as needed\r\n  const randomIndex = Math.floor(Math.random() * images.length);\r\n  const imageSrc = require(`../assets/courseimages/${images[randomIndex]}`).default;\r\n  console.log(imageSrc)\r\n  const handleDetailsClick = () => {\r\n    onDetailsClick(course);\r\n  };\r\n\r\n  return (\r\n    <ButtonBase onClick={handleDetailsClick} sx={{ width: \"100%\",height:\"100%\" }}>\r\n        <Card sx={{width:\"100%\",height:\"100%\"}}>\r\n          <CardMedia\r\n            component=\"img\"\r\n            height=\"140\"\r\n            width=\"100%\"\r\n            sx={{\r\n              objectFit: \"cover\",\r\n              maxWidth:\"100%\",\r\n              maxHeight:\"100%\"\r\n            }}\r\n            image={imageSrc}/>\r\n          <CardContent>\r\n          <Box display=\"flex\" flexDirection=\"column\" justifyContent=\"space-between\" height=\"100%\">\r\n            <Typography gutterBottom variant=\"h6\" fontWeight=\"bold\" component=\"div\" sx={{\r\n                      textOverflow: \"ellipsis\",\r\n                      overflow: \"hidden\",\r\n                      whiteSpace: \"nowrap\",\r\n                      textAlign: \"left\",\r\n                      marginBottom: 0\r\n                    }}\r\n                    truncate={10}>\r\n              {course.courseName}\r\n            </Typography>\r\n            <Typography variant=\"body2\" color=\"text.secondary\" sx={{\r\n                      textOverflow: \"ellipsis\",\r\n                      overflow: \"hidden\",\r\n                      whiteSpace: \"nowrap\",\r\n                      textAlign: \"left\",marginBottom: 0\r\n                    }}\r\n                    truncate={100}>\r\n                {<div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(course.courseDescription)}}/>}\r\n            </Typography>\r\n            </Box>\r\n          </CardContent>\r\n          \r\n        </Card>\r\n      </ButtonBase>\r\n  );\r\n}\r\n","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\assets\\ClassSearchPage.js",["259"],"import { useEffect, useState } from \"react\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Select from \"@mui/material/Select\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Box from \"@mui/material/Box\";\r\nimport InputLabel from \"@mui/material/InputLabel\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport CourseCard from \"./CourseCardEnroll\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nvar baseUrl = \"https://edusphere.vercel.app\"\r\n\r\n\r\nfunction ClassSearchPage() {\r\n  const [courseLevel, setCourseLevel] = useState(\"\");\r\n  const [courseName, setCourseName] = useState(\"\");\r\n  const [courseId, setCourseId] = useState(\"\");\r\n  const [courses, setCourses] = useState([]);\r\n  const [enrolledCourses, setEnrolledCourses] = useState([]);\r\n  // Add this new state\r\n const [filteredCourses, setFilteredCourses] = useState([]);\r\n\r\n  const userId = localStorage.getItem(\"userId\");\r\n  const userType = localStorage.getItem(\"userType\");\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const getAllCourses = async () => {\r\n    try {\r\n      const response = await fetch(baseUrl + '/api/all-courses-available-current-semester', {\r\n        method: 'GET',\r\n        \r\n      });\r\n      const data = await response.json();\r\n      if (data.Status === \"Success\") {\r\n        setCourses(data.response);\r\n        setFilteredCourses(data.response);\r\n        console.log(data.response);\r\n      }\r\n      else {\r\n        console.log('failed');\r\n        console.log(data.response);\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const getEnrolledCourses = async () => {\r\n    try {\r\n      const response = await fetch(baseUrl + `/api/my-courses/?username=${userId}`, {\r\n        method: 'GET',\r\n      });\r\n\r\n      const data = await response.json();\r\n      console.log('enrolled',data.requestedCourses);\r\n      setEnrolledCourses(data.requestedCourses);\r\n      }\r\n  catch{\r\n    console.log('failed');\r\n      }\r\n    }\r\n   \r\n    \r\n  const isCourseEnrolled = (courseId) => {\r\n    return enrolledCourses.some((enrolledCourse) => enrolledCourse.courseId === courseId);\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    if (!userId) {\r\n      navigate('/login');}\r\n    getAllCourses();\r\n    getEnrolledCourses();\r\n    \r\n    console.log('handled');\r\n    console.log(userId);\r\n    console.log(userType);\r\n    }, []);\r\n\r\n\r\n\r\nconst handleSearchClick = () => {\r\n    const hasSearchValue = courseName || courseId || courseLevel;\r\n    if (!hasSearchValue) {\r\n      setFilteredCourses(courses);}\r\n    else {\r\n    const filteredCourses = courses.filter((course) => {\r\n    const matchesCourseName = !courseName || (course.name && course.name.toLowerCase().includes(courseName.toLowerCase()));\r\n    console.log('matchec',matchesCourseName);\r\n    const matchesCourseId = !courseId || (course.id && course.id.toString().includes(courseId));\r\n    const matchesCourseLevel = !courseLevel || (course.cLevel && course.cLevel.toLowerCase() === courseLevel.toLowerCase());\r\n\r\n    return hasSearchValue && (matchesCourseName && matchesCourseId && matchesCourseLevel);}\r\n  );\r\n  setFilteredCourses(filteredCourses);\r\n  console.log('chec',filteredCourses);}\r\n  // Update your state or use the filteredCourses array as needed\r\n};\r\n\r\n\r\nuseEffect(()=>{\r\n  console.log('filtered',filteredCourses);\r\n},[filteredCourses])\r\n\r\n  const handleCourseLevelChange = (event) => {\r\n    if (event.target.value === 'all') {\r\n      setCourseLevel('');\r\n    } else {\r\n    setCourseLevel(event.target.value);\r\n    console.log(courseLevel);}\r\n  };\r\n\r\n  const handleCourseNameChange = (event) => {\r\n    setCourseName(event.target.value);\r\n  };\r\n\r\n  const handleCourseIdChange = (event) => {\r\n    setCourseId(event.target.value);\r\n  };\r\n\r\n  \r\n  return (\r\n    <Box mt={3} ml={3} mr={3} >\r\n      <Grid container spacing={4} rowSpacing={1} columnSpacing={{ xs: 1, sm: 2, md: 4}} >\r\n        <Grid item xs={12} sm={6} md={3}>\r\n          <TextField\r\n            fullWidth\r\n            label=\"Course Name\"\r\n            value={courseName}\r\n            onChange={handleCourseNameChange}/>\r\n        </Grid>\r\n        <Grid item xs={12} sm={6} md={3}>\r\n          <TextField\r\n            fullWidth\r\n            label=\"Course ID\"\r\n            value={courseId}\r\n            onChange={handleCourseIdChange}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6} md={3}>\r\n        <FormControl fullWidth >\r\n        <InputLabel>Level</InputLabel>\r\n            <Select\r\n              \r\n              label=\"Course Level\"\r\n              value={courseLevel}\r\n              onChange={handleCourseLevelChange}>\r\n             \r\n              <MenuItem value=\"all\">All</MenuItem>\r\n              <MenuItem value=\"b\">Beginner</MenuItem>\r\n              <MenuItem value=\"i\">Intermediate</MenuItem>\r\n              <MenuItem value=\"a\">Advanced</MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6} md={3} mt={1}>\r\n          <Button variant=\"contained\" onClick={handleSearchClick}>\r\n            Search\r\n          </Button>\r\n      \r\n        </Grid>\r\n       \r\n      </Grid>\r\n\r\n      <Grid container spacing={0.5} mt={2} justifyContent=\"center\">\r\n        {filteredCourses.map((course) => (\r\n          <Grid item key={course.id} xs={12} sm={12} md={12} l={12}>\r\n            <CourseCard course={course}  isEnrolled={isCourseEnrolled(course.id)} username={userId}/>\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default ClassSearchPage;","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\assets\\AnnouncementsTable.js",["260","261"],"C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\assets\\AssignmentsTable.js",["262"],"C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\assets\\CalendarStud.js",["263","264","265"],"C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\CreateAssignment.js",["266","267","268","269","270","271","272","273","274","275","276","277","278"],"import React, { useState,useEffect } from 'react';\r\nimport '../styles/createassignments.css';\r\nimport TextField  from '@material-ui/core/TextField';\r\nimport {Editor} from '@tinymce/tinymce-react'\r\nimport DOMPurify from 'dompurify';\r\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\r\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\r\nimport { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';\r\nimport Box from '@mui/material/Box';\r\nimport Grid from '@mui/material/Grid';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport Input from '@mui/material/Input';\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useRef } from 'react';\r\nimport FileUploadOutlinedIcon from '@mui/icons-material/FileUploadOutlined';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\n\r\nvar baseUrl = \"https://edusphere.vercel.app\"\r\n\r\nconst CreateAssignment = ({courseid,setCreate,setShowMessage, getAssignments}) => {\r\n    const [assignments, setAssignments] = useState([]);\r\n    const [title, setTitle] = useState('');\r\n    const [points, setPoints] = useState(100);\r\n    const [selectedFile, setSelectedFile] = useState(null);\r\n    const [duedate, setDuedate] = useState(null);\r\n    const [description, setDescription] = useState('');\r\n    const fileInputRef = useRef(null);\r\n    const [fileName, setFileName] = useState('');\r\n    const[isLoading,setIsLoading] = useState(false);\r\n\r\n    const userId = localStorage.userId;\r\n\r\n    const onChangedesc=(e)=>{\r\n      setDescription(e.target.getContent());\r\n    }\r\n    \r\n    const handleNewAssignment = (title, points, file) => {\r\n        const newAssignment = { title, points, file };\r\n    setAssignments([...assignments, newAssignment]);\r\n    };\r\n\r\n    const handleSubmit = async (event) =>{\r\n      event.preventDefault();\r\n      setCreate(false);\r\n      const file = fileInputRef.current.files[0];\r\n      const formData = new FormData();\r\n\r\n      formData.append('file', file);\r\n      formData.append('userid', userId);\r\n      formData.append('courseid', courseid);\r\n      formData.append('title', title);\r\n      formData.append('description', description);\r\n      formData.append('assignmentid', 1); // Replace 1 with the actual assignment ID\r\n      formData.append('points', points);\r\n      formData.append('duedate', duedate);\r\n\r\n      for (const [key, value] of formData.entries()) {\r\n        console.log(`${key}: ${value}`);\r\n      }\r\n\r\n      try {\r\n        const response = await fetch(baseUrl +'/api/professor_upload_assignment', {\r\n          method: 'POST',\r\n          body: formData,\r\n        });\r\n        const data = await response.json();\r\n        console.log('checl',data);\r\n        setShowMessage(true);\r\n        getAssignments()\r\n        setTimeout(() => {\r\n          setShowMessage(false);\r\n        }, 2000);\r\n      } catch (error) {\r\n        // Handle network errors\r\n        console.error('Network error:', error);\r\n      }\r\n    }\r\n\r\n    useEffect(() => {\r\n      console.log('cehck',userId);\r\n    }, []);\r\n\r\n    \r\n    const handleCardClick = (assignment) => {\r\n      window.open(assignment.file);\r\n    };\r\n    \r\n    const handleTitleChange = (e) => {\r\n      setTitle(e.target.value);\r\n      console.log(title);\r\n    };\r\n    \r\n    const handlePointsChange = (e) => {\r\n      setPoints(e.target.value);\r\n    };\r\n    \r\n    const handleDateChange = (newdate) => {\r\n      setDuedate(newdate.format('YYYY-MM-DD HH:mm'));\r\n      // console.log(newdate.d);\r\n      console.log('Formatted date:', newdate.format('YYYY-MM-DD HH:mm'))\r\n    };\r\n\r\n    const handleFileChange = (e) => {\r\n      console.log(e.target.files[0]);\r\n      setFileName(e.target.files[0].name);\r\n    };\r\n\r\n\r\n    return (\r\n      <form id=\"assignment-form\" encType=\"multipart/form-data\" onSubmit={(event) => handleSubmit(event)}>\r\n      <Box sx={{marginTop:\"20px\" }}>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={11} md={11} l={11}>\r\n            <TextField fullWidth variant=\"outlined\" label=\"Title\" onChange={handleTitleChange} required />\r\n          </Grid>\r\n          <Grid item xs={11} md={11} l={11}>\r\n            <Typography variant=\"string\" fontWeight=\"bold\">Description:</Typography>\r\n          </Grid>\r\n          <Grid item xs={11} md={11}>\r\n            <Editor\r\n              apiKey=\"g6npcs2t24w5uzje2ln7lxmz4nzy4t2tly1wjmj1rfbhhas0\"\r\n              initialValue=\"\"\r\n              init={{\r\n                branding: false,\r\n                height: 100,\r\n                menubar: true,\r\n                plugins:\r\n                  \"print preview paste searchreplace autolink directionality visualblocks visualchars fullscreen link template codesample table charmap hr pagebreak nonbreaking anchor toc insertdatetime advlist lists wordcount imagetools textpattern textcolor\",\r\n                toolbar:\r\n                  \"formatselect | bold italic underline strikethrough | forecolor backcolor blockquote | link | alignleft aligncenter alignright alignjustify | numlist bullist outdent indent | removeformat\",\r\n                image_advtab: true,\r\n              }}\r\n              onChange={onChangedesc} required\r\n            />\r\n          </Grid>\r\n          <Grid item xs={11} md={4} justifyContent={'center'}>\r\n              <Button variant=\"outlined\" size='large' component=\"label\"  startIcon={<FileUploadOutlinedIcon/>}>\r\n                Select File\r\n                <input ref={fileInputRef} hidden accept=\".doc,.docx,.pdf,.txt\" type=\"file\" onChange={handleFileChange} required/>\r\n              </Button>\r\n              {fileName && (\r\n              <Typography variant=\"body1\" sx={{ marginTop: 1 }}>\r\n                 {fileName}\r\n              </Typography>\r\n            )}\r\n          </Grid>\r\n          <Grid item xs={11} md={4}>\r\n            {/* <Typography variant=\"h6\">Points:</Typography> */}\r\n            <TextField variant='outlined' size='medium'  label='Points' onChange={handlePointsChange} required>Points</TextField>\r\n          </Grid>\r\n          <Grid item xs={11} md={4}>\r\n            {/* <Typography variant=\"h6\">Due Date:</Typography> */}\r\n            <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n              <DateTimePicker label=\"Due Date\" size='medium' onChange={handleDateChange} required/>\r\n            </LocalizationProvider>\r\n          </Grid>\r\n            <Grid container marginTop={2} xs={11} md={11} display=\"flex\" justifyContent=\"center\">\r\n              <Button variant=\"contained\" color=\"primary\" type=\"submit\">\r\n                Create\r\n              </Button>\r\n            </Grid>\r\n        </Grid>\r\n      </Box>\r\n      </form>\r\n    );\r\n    \r\n};\r\n\r\nexport default CreateAssignment;","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\assets\\CourseCardEnroll.js",["279"],"C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\TextEditorIns.js",[],"C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\GradesWrapper.js",[],"C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\assets\\CourseSearchWrapper.js",[],"C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\modules.js",["280","281","282"],"import React, { useEffect, useState } from 'react';\r\nimport {Editor} from '@tinymce/tinymce-react'\r\nimport DOMPurify from 'dompurify';\r\nimport Grid from \"@mui/material/Grid\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Typography from '@mui/material/Typography';\r\nimport { useParams } from \"react-router-dom\";\r\nimport '../styles/announcement.css';\r\nimport Button from '@mui/material/Button';\r\nimport Box from '@mui/material/Box';\r\nimport { List,\r\n  ListItem,\r\n  ListItemText,\r\n  Collapse,\r\n  Divider, } from '@mui/material';\r\nimport AddRoundedIcon from '@mui/icons-material/AddRounded';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\n\r\nvar baseUrl = \"https://edusphere.vercel.app\"\r\n\r\nconst ModulesPage = () => {\r\n\r\n  const [moduleTitle, setModuleTitle] = useState();\r\n  const [moduleDescription, setModuleDescription] = useState();\r\n  const [moduleLink, setModuleLink] = useState();\r\n  const [showMessage, setShowMessage] = useState(false);\r\n  \r\n  const userId = localStorage.getItem('userId')\r\n  const userType = localStorage.getItem('userType')\r\n  const {courseId} = useParams();\r\n  const [showEditor,setShowEditor] = useState(false);\r\n\r\n  const [modules,setModules] = useState([]);\r\n  console.log('ch',modules);\r\n  const [expandedIndex, setExpandedIndex] = useState(-1);\r\n  const[isLoading,setIsloading] = useState(true);\r\n\r\n  const showContent = (index) => {\r\n    if (expandedIndex === index) {\r\n      setExpandedIndex(-1);\r\n    } else {\r\n      setExpandedIndex(index);\r\n    }\r\n  };\r\n\r\n\r\n  const fetchModules= async()=>{\r\n    try{\r\n      const response = await fetch(baseUrl + `/api/view_modules?courseid=${courseId}`, {\r\n        method: 'GET',\r\n      });\r\n      const data = await response.json()\r\n      console.log(data.Response);\r\n      console.log(data.Status===\"Success\");\r\n      if (data.Status === \"Success\") {\r\n        setModules(data.Response.modules.flat())\r\n        console.log('chec',data.Response.modules.flat())\r\n      }\r\n\r\n    }catch {\r\n      console.log('error');\r\n    }\r\n  }\r\n\r\nuseEffect(()=>{\r\n  fetchModules();\r\n  setIsloading(false);\r\n  console.log('checl',modules);\r\n},[])\r\n\r\n  const handleSubmit = async()=>{\r\n  setShowEditor(false);\r\n   try {\r\n      const response = await fetch( baseUrl +`/api/create-update-course-module`, {\r\n        method: 'POST',\r\n        headers: {\r\n        'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n            \"userId\":userId,\r\n            \"courseId\":parseInt(courseId),\r\n            \"moduleTitle\":moduleTitle,\r\n            \"moduleDescription\": moduleDescription,\r\n            \"moduleLink\": moduleLink\r\n        }),\r\n      });\r\n      const data = await response.json();\r\n      setShowMessage(true);\r\n      setTimeout(() => {\r\n        setShowMessage(false);\r\n      }, 2000);\r\n      fetchModules();\r\n      \r\n        } catch (error) {\r\n      console.error('Network error:', error);\r\n     }\r\n    // console.log('Submitting',courseId,userId,moduleTitle,moduleDescription,moduleLink);\r\n  }\r\n\r\n\r\n  \r\n  const isValid = (url) => {\r\n    const regex = /^https?:\\/\\/.+$/;\r\n    return regex.test(url);\r\n  };\r\n\r\n\r\n  const ModuleCard = ({ module, expanded, onReadMore }) => {\r\n    const oneLineDescription = module.moduleDescription.replace(/<[^>]*>/g, '').substring(0, 100) + '...';\r\n    return (\r\n      <>\r\n      <ListItem onClick={onReadMore}>\r\n        <Divider/>\r\n        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" width=\"100%\">\r\n          <Box>\r\n            <ListItemText primary={<Typography variant=\"string\" component=\"span\" fontWeight=\"bold\">\r\n                  {module.moduleTitle}</Typography>}/>\r\n            {!expanded && (\r\n              <Box marginTop=\"8px\">\r\n                <Typography variant=\"body2\" color=\"text.secondary\"> {oneLineDescription}</Typography>\r\n              </Box>)}\r\n          </Box>\r\n          <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\r\n            Posted on: {new Date(module.date).toLocaleString()}\r\n          </Typography>\r\n        </Box>\r\n      </ListItem>\r\n      <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\r\n        <List component=\"div\" disablePadding>\r\n\r\n          <ListItem sx={{ paddingTop: '0px', marginTop: '0px', paddingBottom: '0px' }}>\r\n                <ListItemText primary={<Typography> Description: <br/>\r\n                <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(module.moduleDescription),}}/>\r\n                  Link: <a href={module.moduleLink} target=\"_blank\" rel=\"noopener noreferrer\">{module.moduleLink}</a>\r\n                </Typography>\r\n              }\r\n            />\r\n          </ListItem>\r\n\r\n        </List>\r\n      </Collapse>\r\n      <Divider/>\r\n      <Divider sx={{ backgroundColor: 'rgba(0, 0, 0, 0.2)' }} />\r\n      </>\r\n    );\r\n  };\r\n\r\n  const onChangedesc = (desc) => {\r\n    setModuleDescription(desc.target.getContent());\r\n   }\r\n\r\n  return (\r\n    <div>\r\n        <Box sx={{marginTop:2,marginRight:2}} justifyContent=\"right\">\r\n          { (userType.toLowerCase() === 'i') &&\r\n          (<Grid container justifyContent=\"flex-end\" marginBottom={4}>\r\n            <Button variant='contained' startIcon={<AddRoundedIcon/>} onClick={()=>{setShowEditor(!showEditor)}}>Create</Button>\r\n          </Grid>)}\r\n          {showMessage && (\r\n            <Grid container justifyContent=\"center\">\r\n              <Typography variant=\"h6\" fontWeight=\"bold\" color=\"success.main\">\r\n                Module created successfully!\r\n              </Typography>\r\n              </Grid>\r\n          )}\r\n          {showEditor && (\r\n            <Grid container marginBottom={4} justifyContent=\"center\">\r\n              <Grid item md={10} sm={12} xs={12}>\r\n                <TextField fullWidth label='Title' value={moduleTitle} onChange={(e)=>setModuleTitle(e.target.value)} required></TextField>\r\n              </Grid>\r\n              \r\n              <Grid item xs={12} md={10} sm={12} sx={{marginTop:\"10px\",marginBottom:\"10px\"}}>\r\n                  <Typography variant=\"string\" component=\"span\" fontWeight=\"bold\" sx={{ marginBottom: \"10px\" }}>Description:</Typography>\r\n                  <Editor\r\n                  apiKey=\"g6npcs2t24w5uzje2ln7lxmz4nzy4t2tly1wjmj1rfbhhas0\"\r\n                  initialValue=\"\"\r\n                  init={{\r\n                    branding: false,\r\n                    height: 100,\r\n                    menubar: true,\r\n                    plugins:\r\n                      \"print preview paste searchreplace autolink directionality visualblocks visualchars fullscreen link template codesample table charmap hr pagebreak nonbreaking anchor toc insertdatetime advlist lists wordcount imagetools textpattern textcolor\",\r\n                    toolbar:\r\n                      \"formatselect | bold italic underline strikethrough | forecolor backcolor blockquote | link | alignleft aligncenter alignright alignjustify | numlist bullist outdent indent | removeformat\",\r\n                    image_advtab: true\r\n                  }}\r\n                  onChange={onChangedesc}\r\n                />\r\n                <TextField fullWidth label=\"Link\" type=\"url\" value={moduleLink}  sx={{marginTop:2}}\r\n                  onChange={(e) => setModuleLink(e.target.value)}\r\n                  InputProps={{pattern: \"https?://.+\"}} required/>\r\n                <Button variant='contained' className=\"add-announcement-button\" onClick={() => handleSubmit()} sx={{marginTop:4}}>\r\n                    Post\r\n                  </Button>\r\n                </Grid>\r\n            </Grid>\r\n          )}\r\n        </Box>\r\n        <Grid container display={isLoading?'none':'flex'}>\r\n          <Grid item md={12} xs={8} sm={12} sx={{borderTop:\"1px solid black\"}} justifyContent =\"center\">\r\n              {modules && \r\n                modules.map((module, index) => (\r\n                  <ModuleCard\r\n                  key={index}\r\n                  module={module}\r\n                  expanded={expandedIndex === index}\r\n                  onReadMore={() => showContent(index)}/>\r\n              ))}\r\n            </Grid>\r\n        </Grid>\r\n        <Grid container>\r\n        {isLoading && <CircularProgress/>}\r\n        </Grid>\r\n        <Grid container justifyContent=\"center\" m={2}>\r\n        {modules.length===0 && <Typography variant='h6' fontStyle='italic' color='text.disabled'>No modules</Typography>}\r\n        </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ModulesPage;\r\n","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\Grades.js",["283","284"],"import React, { useState, useEffect } from 'react';\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nimport Box from '@mui/material/Box';\r\nimport Grid from '@mui/material/Grid';\r\nimport Typography from '@mui/material/Typography';\r\nimport Select from '@mui/material/Select';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport Paper from '@mui/material/Paper';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Card from  '@mui/material/Card';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\n\r\nvar baseUrl = \"https://edusphere.vercel.app\"\r\n// var baseUrl = \"http://127.0.0.1:8000/\"\r\n\r\n\r\nconst Grades = () => {\r\n  const [selectedAssignment, setSelectedAssignment] = useState('');\r\n  const [submissions, setSubmissions] = useState([]);\r\n  const[assignments,setAssignments] = useState([]);\r\n\r\n  const {courseId} = useParams();\r\n  const userId = localStorage.getItem('userId');\r\n  const [comments, setComments] = useState({});\r\n  const [grds, setGrds] = useState({});\r\n  const [showMessage, setShowMessage] = useState(false);\r\n  const [submittedStudentName, setSubmittedStudentName] = useState();\r\n\r\n\r\n  console.log('course',courseId);\r\n\r\n  useEffect( () => {\r\n    \r\n    const getAssignments = async()=>{\r\n      try {\r\n        const response = await fetch(baseUrl +`/api/get_professor_created_assignment?username=${userId}&courseId=${courseId}`, {\r\n          method: 'GET',\r\n        });\r\n        const data = await response.json();\r\n        setAssignments(data.response);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    }\r\n    getAssignments();\r\n  \r\n    }, []);\r\n\r\n  const fetchSubmissions = async (assignmentId) => {\r\n      try {\r\n      const response = await fetch( baseUrl + `/api/professor_list_gradebookview?courseId=${courseId}&assignmentId=${assignmentId}`,\r\n       {\r\n        method: 'GET',\r\n      });\r\n      const data = await response.json();\r\n      if (data) {\r\n        setSubmissions(data);\r\n        }\r\n        else {\r\n          console.log('Failed');\r\n        }\r\n      }\r\n      catch{\r\n        console.log('failed');}\r\n    };\r\n\r\n\r\n  const handleCommentChange = (event, userId) => {\r\n      setComments({\r\n        ...comments,\r\n        [userId]: event.target.value\r\n      });\r\n    };\r\n\r\n  const handleAssignmentSelect = (event) => {\r\n    const assignmentId = event.target.value;\r\n    setSelectedAssignment(assignmentId);\r\n    fetchSubmissions(assignmentId);\r\n  };\r\n\r\n  const handleMarksChange = (event, stuId) => {\r\n    const updatedMarks = parseInt(event.target.value);\r\n    const maxPoints = submissions[0].maxPoints;\r\n    if (updatedMarks > maxPoints) {\r\n      setGrds({\r\n        ...grds,\r\n        [stuId]: maxPoints\r\n      });\r\n    } else {\r\n    setGrds({\r\n      ...grds,\r\n      [stuId]: event.target.value\r\n    });}\r\n  };\r\n\r\n  const handleSubmitGrade = async (userId, points, comments, assignmentId,submission) => {\r\n    // Handle the grade submission logic here\r\n    try {\r\n      const response = await fetch( baseUrl+ '/api/instuctor_grade_assignment', {\r\n        method: 'POST',\r\n        headers: {\r\n        'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n            \"userid\":userId,\r\n            \"assignmentId\": assignmentId,\r\n            \"courseId\": courseId,\r\n            \"points\": points,\r\n            \"comments\": comments,\r\n        }),\r\n      });\r\n      const data = await response.json();\r\n      console.log('check',data);\r\n    } catch (error) {\r\n      // Handle network errors\r\n      console.error('Network error:', error);\r\n    }\r\n    setSubmittedStudentName(submission.studentfirstname+' '+submission.studentlastname);\r\n    setShowMessage(true);\r\n    setTimeout(() => {\r\n      setShowMessage(false);\r\n    }, 2000);\r\n    console.log(\"Submitting grade for\", userId, points, comments, assignmentId, courseId);\r\n  };\r\n  \r\n\r\n  return (\r\n    <Box sx={{ flexGrow: 1, padding: 2 }}>\r\n      <Typography variant=\"h6\" fontWeight=\"bold\" sx={{ marginBottom: 2 }}>\r\n        Gradebook\r\n      </Typography>\r\n      <Grid container>\r\n        <Grid item xs={9} sm={6} md={4}>\r\n        <FormControl fullWidth variant=\"outlined\" sx={{ marginBottom: 2 }}>\r\n        <InputLabel id=\"assignment-select-label\">Select Assignment</InputLabel>\r\n        <Select\r\n          labelId=\"assignment-select-label\"\r\n          id=\"assignment-select\"\r\n          value={selectedAssignment}\r\n          onChange={handleAssignmentSelect}\r\n          label=\"Select Assignment\"\r\n        >\r\n          {assignments.map((assignment) => (\r\n            <MenuItem key={assignment.assingnmentNumber} value={assignment.assingnmentNumber}>\r\n              {assignment.assingnmentTitle}\r\n            </MenuItem>\r\n          ))}\r\n        </Select>\r\n      </FormControl>\r\n      </Grid>\r\n      </Grid>\r\n\r\n      {showMessage && (\r\n        <Grid container justifyContent=\"center\">\r\n          <Typography variant=\"h6\" fontWeight=\"bold\" color=\"success.main\">\r\n            Grade submitted successfully for {submittedStudentName}!\r\n          </Typography>\r\n          </Grid>\r\n      )}\r\n\r\n      {submissions.length > 0 && (\r\n        <Grid container>\r\n          <Grid item md={12} xs={12} sm={12}>\r\n            <Typography fontWeight=\"bold\" variant='body1' sx={{marginBottom:2}}>Submissions</Typography>\r\n          </Grid>\r\n          <Grid item md={12} xs={12}>\r\n        <TableContainer component={Card}>\r\n          <Table sx={{ '& td, & th': { border: '1px solid rgba(224, 224, 224, 1)' } }}>\r\n            <TableHead sx={{fontWeight:\"bold\"}}>\r\n              <TableRow sx={{fontWeight:\"bold\"}}>\r\n                <TableCell sx={{fontWeight:\"bold\",backgroundColor: '#f5f5f5'}} align=\"center\">Student</TableCell>\r\n                <TableCell sx={{fontWeight:\"bold\",backgroundColor: '#f5f5f5'}} align=\"center\">Submission Date</TableCell>\r\n                <TableCell sx={{fontWeight:\"bold\",backgroundColor: '#f5f5f5'}} align=\"center\">Submission</TableCell>\r\n                <TableCell sx={{fontWeight:\"bold\",backgroundColor: '#f5f5f5'}} align=\"center\">Max Points</TableCell>\r\n                <TableCell sx={{fontWeight:\"bold\",backgroundColor: '#f5f5f5'}} align=\"center\">Grade</TableCell>\r\n                <TableCell sx={{fontWeight:\"bold\",backgroundColor: '#f5f5f5'}} align=\"center\">Comments</TableCell>\r\n                <TableCell sx={{fontWeight:\"bold\",backgroundColor: '#f5f5f5'}} align=\"center\">Submit</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {submissions.map((submission, index)=> (\r\n                <TableRow key={submission.submissionId}>\r\n                  <TableCell align=\"center\" component=\"th\" scope=\"row\">\r\n                    {submission.studentfirstname+' '+submission.studentlastname}\r\n                  </TableCell>\r\n                  <TableCell align=\"center\" component=\"th\" scope=\"row\">\r\n                    {submission.isSubmittedDate? new Date(submission.isSubmittedDate).toLocaleString():\"NA\"}\r\n                  </TableCell>\r\n                  <TableCell align=\"center\" component=\"th\" scope=\"row\">\r\n                    <a href ={submission.assignmentlink} target=\"_blank\" rel=\"noopener noreferrer\">Link</a>\r\n                  </TableCell>\r\n                  <TableCell align=\"center\" component=\"th\" scope=\"row\">\r\n                    {submission.maxPoints}\r\n                  </TableCell>\r\n                  <TableCell align=\"center\">\r\n                  <TextField\r\n                      type=\"number\"\r\n                      InputProps={{ inputProps: { min: 0, max:submission.maxPoints } }}\r\n                      value={submission.marks}\r\n                      size=\"small\"\r\n                      onChange={(event) => handleMarksChange(event, submission.userId)}\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell align=\"center\">\r\n                  <TextField\r\n                      type=\"text\"\r\n                      value={comments[submission.userId] || ''}\r\n                      size=\"small\"\r\n                      onChange={(event) => handleCommentChange(event, submission.userId)}\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell align=\"center\">\r\n                    <Button onClick={() => handleSubmitGrade(submission.userId, grds[submission.userId], comments[submission.userId], selectedAssignment,submission)}>Submit</Button>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        </Grid>\r\n        </Grid>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Grades;\r\n\r\n\r\n\r\n\r\n\r\n","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\admindash.js",["285","286","287","288","289","290","291","292"],"import * as React from \"react\";\r\nimport { styled, useTheme } from \"@mui/material/styles\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Container from \"@mui/material/Container\";\r\nimport  MuiDrawer from \"@mui/material/Drawer\";\r\nimport MuiAppBar from \"@mui/material/AppBar\";\r\nimport Toolbar from \"@mui/material/Toolbar\";\r\nimport List from \"@mui/material/List\";\r\nimport CssBaseline from \"@mui/material/CssBaseline\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Divider from \"@mui/material/Divider\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport ListItem from \"@mui/material/ListItem\";\r\nimport ListItemButton from \"@mui/material/ListItemButton\";\r\nimport ListItemIcon from \"@mui/material/ListItemIcon\";\r\nimport ListItemText from \"@mui/material/ListItemText\";\r\nimport Menu from \"@mui/material/Menu\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport Avatar from \"@mui/material/Avatar\";\r\nimport MenuIcon from \"@mui/icons-material/Menu\";\r\nimport ChevronLeftIcon from \"@mui/icons-material/ChevronLeft\";\r\nimport ChevronRightIcon from \"@mui/icons-material/ChevronRight\";\r\nimport AutoStoriesIcon from \"@mui/icons-material/AutoStories\";\r\nimport AddBoxOutlinedIcon from \"@mui/icons-material/AddBoxOutlined\";\r\nimport HomeIcon from \"@mui/icons-material/Home\";\r\nimport AccountCircle from \"@mui/icons-material/AccountCircle\";\r\n\r\nimport { deepOrange, deepPurple } from \"@mui/material/colors\";\r\nimport ClassSearchPage from \"./assets/ClassSearchPage\";\r\nimport CoursesPage from \"./assets/CoursesPage\";\r\n// import Home from \"./assets/Home\";\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst openedMixin = (theme) => ({\r\n  width: drawerWidth,\r\n  transition: theme.transitions.create(\"width\", {\r\n    easing: theme.transitions.easing.sharp,\r\n    duration: theme.transitions.duration.enteringScreen\r\n  }),\r\n  overflowX: \"hidden\"\r\n});\r\n\r\nconst closedMixin = (theme) => ({\r\n  transition: theme.transitions.create(\"width\", {\r\n    easing: theme.transitions.easing.sharp,\r\n    duration: theme.transitions.duration.leavingScreen\r\n  }),\r\n  overflowX: \"hidden\",\r\n  width: `calc(${theme.spacing(7)} + 1px)`,\r\n  [theme.breakpoints.up(\"sm\")]: {\r\n    width: `calc(${theme.spacing(8)} + 1px)`\r\n  }\r\n});\r\n\r\nconst DrawerHeader = styled(\"div\")(({ theme }) => ({\r\n  display: \"flex\",\r\n  alignItems: \"left\",\r\n  justifyContent: \"flex-start\",\r\n  padding: theme.spacing(0, 1),\r\n  // necessary for content to be below app bar\r\n  ...theme.mixins.toolbar\r\n}));\r\n\r\nconst AppBar = styled(MuiAppBar, {\r\n  shouldForwardProp: (prop) => prop !== \"open\"\r\n})(({ theme, open }) => ({\r\n  zIndex: theme.zIndex.drawer + 1,\r\n  transition: theme.transitions.create([\"width\", \"margin\"], {\r\n    easing: theme.transitions.easing.sharp,\r\n    duration: theme.transitions.duration.leavingScreen\r\n  }),\r\n  ...(open && {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen\r\n    })\r\n  })\r\n}));\r\n\r\nconst Drawer = styled(MuiDrawer, {\r\n  shouldForwardProp: (prop) => prop !== \"open\"\r\n})(({ theme, open }) => ({\r\n  width: drawerWidth,\r\n  flexShrink: 0,\r\n  whiteSpace: \"nowrap\",\r\n  boxSizing: \"border-box\",\r\n  ...(open && {\r\n    ...openedMixin(theme),\r\n    \"& .MuiDrawer-paper\": openedMixin(theme)\r\n  }),\r\n  ...(!open && {\r\n    ...closedMixin(theme),\r\n    \"& .MuiDrawer-paper\": closedMixin(theme)\r\n  })\r\n}));\r\n\r\nvar baseUrl = \"https://edusphere.vercel.app\"\r\n\r\n\r\nexport default function Admindash(props) {\r\n  const theme = useTheme();\r\n  const [open, setOpen] = React.useState(false);\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const [activeMenu, setActiveMenu] = React.useState(0);\r\n  const [showProfile, setShowProfile] = React.useState(false);\r\n\r\n  const handleMenu = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleLogout = async() =>  {\r\n\r\n    const response = await fetch(baseUrl + '/logout/', {\r\n        method: 'POST',\r\n        headers: {\r\n        'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          userId: localStorage.getItem(\"userId\"),\r\n        }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      if (response.ok) {\r\n        // Handle successful logout\r\n          localStorage.clear();\r\n          window.location.href = '/';\r\n        }\r\n    };\r\n\r\n  var userFullName = localStorage.getItem(\"userFullName\"); \r\n  var name = userFullName || \"John Doe\" ;\r\n\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n\r\n  const access_ele = {\"Home\":'/', \"Profile\":'/profile'}\r\n\r\n\r\n  // const history = useHistory();\r\n  const handleselection = (text) => {\r\n    const basePath = location.pathname.split('/')[0];\r\n    navigate(basePath+'/admindashboard' + access_ele[text]);\r\n  }\r\n  // \"#113224 !important\",\r\n  return (\r\n    <Box sx={{ display: \"flex\", justifyContent:'left' ,p:0 }}>\r\n      <CssBaseline />\r\n      <AppBar position=\"fixed\" open={open} sx={{ backgroundColor:  \"#1C4E80 !important\",\r\n          color: \"#ffffff !important\" }}>\r\n        <Toolbar>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={handleDrawerOpen}\r\n            edge=\"start\"\r\n            sx={{\r\n              marginRight: 5,\r\n              ...(open && { display: \"none\" })\r\n            }}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography\r\n            variant=\"h6\"\r\n            noWrap\r\n            component=\"div\"\r\n            sx={{ flexGrow: 1, display: \"flex\",p:0 }}\r\n          >\r\n            Dashboard\r\n          </Typography>\r\n          <div sx={{ marginRight: \"0\" ,p:0}}>\r\n            <IconButton\r\n              size=\"large\"\r\n              aria-label=\"account of current user\"\r\n              aria-controls=\"menu-appbar\"\r\n              aria-haspopup=\"true\"\r\n              onClick={handleMenu}\r\n              color=\"inherit\"\r\n              sx={{ marginRight: -2 }}\r\n            >\r\n              <AccountCircle />\r\n            </IconButton>\r\n            <Menu\r\n              id=\"menu-appbar\"\r\n              anchorEl={anchorEl}\r\n              anchorOrigin={{\r\n                vertical: \"top\",\r\n                horizontal: \"right\"\r\n              }}\r\n              keepMounted\r\n              transformOrigin={{\r\n                vertical: \"top\",\r\n                horizontal: \"right\"\r\n              }}\r\n              open={Boolean(anchorEl)}\r\n              onClose={handleClose}\r\n            >\r\n                <MenuItem\r\n                onClick={()=>handleselection('Profile')}\r\n                //   setActiveMenu(3);\r\n                //   setShowProfile(true);\r\n                //   handleClose();\r\n                // }\r\n              >\r\n                Profile\r\n              </MenuItem>\r\n              <MenuItem onClick={handleLogout}>Logout</MenuItem>\r\n            </Menu>\r\n          </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n\r\n      <Drawer variant=\"permanent\" open={open}>\r\n        <DrawerHeader sx={{ display: \"flex\", alignItems: \"center\" }}>\r\n          <Avatar\r\n            sx={{\r\n              bgcolor: deepOrange[100],\r\n              color: deepPurple[600],\r\n              marginRight: 1\r\n            }}\r\n          >\r\n            {name.charAt(0).toUpperCase()}\r\n          </Avatar>\r\n          <ListItemText primary={name} />\r\n          <IconButton onClick={handleDrawerClose}>\r\n            {theme.direction === \"rtl\" ? (\r\n              <ChevronRightIcon />\r\n            ) : (\r\n              <ChevronLeftIcon />\r\n            )}\r\n          </IconButton>\r\n        </DrawerHeader>\r\n        <Divider />\r\n        <List>\r\n          {[\"Home\" ].map(\r\n            (text, index) => (\r\n              <ListItem\r\n                key={text}\r\n                disablePadding\r\n                sx={{ display: \"block\" ,p:0}}\r\n                onClick={()=>handleselection(text)}\r\n                // selected={activeMenu === index}\r\n                // button\r\n              >\r\n                <ListItemButton\r\n                  sx={{\r\n                    minHeight: 48,\r\n                    justifyContent: open ? \"initial\" : \"center\",\r\n                    px: 2.5\r\n                  }}\r\n                >\r\n                  <ListItemIcon\r\n                    sx={{\r\n                      minWidth: 0,\r\n                      mr: open ? 3 : \"auto\",\r\n                      justifyContent: \"center\"\r\n                    }}\r\n                  >\r\n                    {index === 0 ? (\r\n                      <HomeIcon />\r\n                    ) : index % 2 === 0 ? (\r\n                      <AutoStoriesIcon />\r\n                    ) : (\r\n                      <AddBoxOutlinedIcon />\r\n                    )}\r\n                  </ListItemIcon>\r\n                  <ListItemText primary={text} sx={{ opacity: open ? 1 : 0 }} />\r\n                </ListItemButton>\r\n              </ListItem>\r\n            )\r\n          )}\r\n        </List>\r\n      </Drawer>\r\n      <Box maxWidth=\"xl\" sx={{display:'flexwrap', justifyContent:'flex-start', flexGrow:1, paddingTop:8 }}>\r\n        {props.children}\r\n    </Box>\r\n    </Box>\r\n      \r\n  );\r\n}","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\assets\\ChatPage.js",["293","294","295","296","297","298"],"import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport SendIcon from '@material-ui/icons/Send';\r\n\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 500,\r\n  },\r\n  chatSection: {\r\n    width: '100%',\r\n    height: '70vh'\r\n  },\r\n  headBG: {\r\n      backgroundColor: '#e0e0e0'\r\n  },\r\n  borderRight500: {\r\n      borderRight: '2px solid #e0e0e0'\r\n  },\r\n  messageArea: {\r\n    height: '70vh',\r\n    overflowY: 'auto'\r\n  }\r\n});\r\n\r\nvar baseUrl = \"https://edusphere.vercel.app\"\r\n// var baseUrl = \"http://127.0.0.1:8000\"\r\n\r\n\r\nconst ChatPage = () => {\r\n  const classes = useStyles();\r\n  const [users, setUsers] = useState([])\r\n  const [chatData, setChatData] = useState([])\r\n  const [selectUserName , setSelectUserName] = useState(\"User\")\r\n  const [selectedUserEmail , setSelectedUserEmail] = useState(\"\")\r\n  const [typedMessage , setTypedMessage] = useState(\"\")\r\n  const [snackbarMessage, setSnackbarMessage] = React.useState(false);\r\n  const [openSuccessSnackbar, setOpenSuccessSnackbar] = React.useState(false);\r\n\r\n  const userFullName = localStorage.getItem(\"userFullName\"); \r\n  \r\n  useEffect(() => {\r\n        fetchUserThreads()\r\n    },[])\r\n\r\n    async function fetchUserThreads() {\r\n        try {\r\n          const response = await fetch(baseUrl + `/api/chats-for-user/?username=${localStorage.getItem(\"userId\")}`, {\r\n            method: 'GET',\r\n          });\r\n          const data = await response.json();\r\n          setUsers(data.data)\r\n          console.log(data);\r\n        } catch (error) {\r\n          console.error(error);\r\n        }\r\n      }\r\n\r\n    async function sendChatUpdate() {\r\n        const data = {\r\n            senderusername: localStorage.getItem(\"userId\"),\r\n            username1: localStorage.getItem(\"userId\"),\r\n            username2: selectedUserEmail,\r\n            message: typedMessage\r\n        };\r\n      \r\n        const response = await fetch(baseUrl+\"/api/chat-update/\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\"\r\n          },\r\n          body: JSON.stringify(data)\r\n        })\r\n\r\n        const responseData = await response.json();\r\n        if(responseData.Status == \"Success\"){\r\n            // Handle response data here\r\n            setSnackbarMessage(\"Your message is successfully sent to \"+ selectUserName)\r\n            setOpenSuccessSnackbar(true)\r\n            fetchUserThreads()\r\n            var obj = {}\r\n            obj[\"chatId\"] = \"x\"\r\n            obj[\"userId1\"] = \"x\"\r\n            obj[\"userId2\"] = \"x\"\r\n            obj[\"messageSenderId\"] = \"x\"\r\n            obj[\"message\"] = typedMessage\r\n            obj[\"messageSenderName\"] = userFullName\r\n            obj[\"messageDateTime\"] = \"recent\"\r\n\r\n            chatData.push(obj)\r\n            setChatData(chatData)\r\n            setTypedMessage(\"\")\r\n\r\n        }\r\n        else{\r\n          console.log(\"Error occured\")\r\n        }\r\n          // .then(response => {\r\n          //   if (response.status == 200) {\r\n          //     // Request was successful\r\n          //     console.log(\"response : \", response.status)\r\n\r\n          //   //   location.reload(); \r\n\r\n          //   } else {\r\n          //     // Request failed\r\n          //     throw new Error(\"Request failed\");\r\n          //   }\r\n          // })\r\n          // .then(data => {\r\n          //   if (data.Status == 'success') {\r\n\r\n          //   }\r\n\r\n          //   console.log(data);\r\n          // })\r\n          // .catch(error => {\r\n          //   // Handle errors here\r\n          //   console.error(error);\r\n          // });\r\n      }\r\n      \r\n\r\n    function handleClick(id) {\r\n        // do something with the clicked item's ID, such as navigate to a new page or update the state\r\n        console.log(`Item ${id} was clicked`);\r\n        var selectedChatData = users.find(item => item.otherUserId === parseInt(`${id}`))\r\n        var selectedChats = selectedChatData[\"chats\"]\r\n        var selectedUserName =  selectedChatData[\"receiverName\"]\r\n        var selectedUserEmail =  selectedChatData[\"receiveUsername\"]\r\n\r\n        \r\n        selectedChats.sort((a, b) => a.chatId - b.chatId);\r\n        console.log(\"required dta : \",selectedChatData )\r\n        setChatData(selectedChats);\r\n        setSelectUserName(selectedChatData[\"receiverName\"])\r\n        setSelectedUserEmail(selectedChatData[\"receiveUsername\"])\r\n\r\n    }\r\n  \r\n    function handleTypeMessageChange(event) {\r\n        setTypedMessage(event.target.value);\r\n      }\r\n\r\n    function handleSendMessage(e){\r\n        sendChatUpdate()\r\n    }\r\n\r\n    function handleClose(e){\r\n        setOpenSuccessSnackbar(false);\r\n      };\r\n\r\n  return (\r\n      <div>\r\n        <Grid container >\r\n            {/* <Grid item xs={12} >\r\n                <Typography variant=\"h5\" className=\"header-message\">Chat</Typography>\r\n            </Grid> */}\r\n        </Grid>\r\n        <Grid container component={Paper} className={classes.chatSection}>\r\n            <Grid item xs={3} className={classes.borderRight500}>\r\n                <List>\r\n                    <ListItem button key=\"RemySharp\">\r\n                        <ListItemIcon>\r\n                            <Avatar style={{backgroundColor: 'blueviolet'}}>\r\n                                    {userFullName.charAt(0).toUpperCase()}\r\n                            </Avatar>\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={userFullName}></ListItemText>\r\n                        <span style={{width: \"10px\",height: \"10px\",borderRadius: \"50%\",backgroundColor: \"green\"}}></span>\r\n\r\n                    </ListItem>\r\n                </List>\r\n                <Divider />\r\n                <List className={classes.messageArea}>\r\n                    {users.map((item) => (\r\n                        <ListItem button key={item.threadId} onClick={() => handleClick(item.otherUserId)}>\r\n                            <ListItemIcon>\r\n                                {(item.otherUserType == 'i') ? \r\n                                    <Avatar style={{ backgroundColor: 'brown' }}>\r\n                                        {item?.receiverName?.charAt(0).toUpperCase()}\r\n                                    </Avatar>\r\n                                    :\r\n                                    <Avatar style={{ backgroundColor: 'darkgreen' }}>\r\n                                        {item?.receiverName?.charAt(0).toUpperCase()}\r\n                                    </Avatar>\r\n                                }\r\n\r\n                                {/* <Avatar>\r\n                                    {item?.receiverName?.charAt(0).toUpperCase()}\r\n                                </Avatar> */}\r\n                            </ListItemIcon>\r\n                            <ListItemText primary={item.receiverName} />\r\n                            {(item.status == 'online') ? \r\n                            <span style={{width: \"10px\",height: \"10px\",borderRadius: \"50%\",backgroundColor: \"green\"}}></span>\r\n                            :\r\n                            <span style={{width: \"10px\",height: \"10px\",borderRadius: \"50%\",backgroundColor: \"red\"}}></span>\r\n                            }\r\n                        </ListItem>\r\n                    ))}\r\n                </List>\r\n            </Grid>\r\n            <Grid item xs={9}>\r\n                <List className={classes.messageArea}>\r\n\r\n                    {/* {chatData.map((item) => (\r\n                            <ListItem alignItems=\"flex-start\">\r\n                                <Grid container>\r\n                                    <Grid item xs={12}>\r\n                                        <ListItemText align=\"right\" primary={item.message}>\r\n                                        </ListItemText>\r\n                                    </Grid>\r\n                                    <Grid item xs={12}>\r\n                                        <ListItemText align=\"right\" primary={item.message} secondary={item.messageDateTime}></ListItemText>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </ListItem>\r\n                            ))} */}\r\n\r\n                    {chatData.map((item) => (\r\n\r\n                        <ListItem alignItems=\"flex-start\">\r\n                                <ListItemAvatar>\r\n                                    <Avatar>\r\n                                        {item.messageSenderName.charAt(0).toUpperCase()}\r\n                                    </Avatar>\r\n                                </ListItemAvatar>\r\n                                <ListItemText\r\n                                    primary={item.message}\r\n                                    secondary={\r\n                                        <React.Fragment>\r\n                                        <Typography\r\n                                            sx={{ display: 'inline' }}\r\n                                            component=\"span\"\r\n                                            variant=\"body2\"\r\n                                            color=\"text.primary\"\r\n                                        >\r\n                                            {item.messageDateTime}\r\n                                        </Typography>\r\n                                        {/* {\" — I'll be in your neighborhood doing errands this…\"} */}\r\n                                        </React.Fragment>\r\n                                    }\r\n                                />\r\n                            </ListItem>\r\n\r\n                        ))}\r\n                </List>\r\n                <p style={{fontSize: 'small', textAlign: 'center', color: 'gray', margin:0}}>\r\n                    Chatting with <span style={{color:'green'}}>{selectUserName} </span>\r\n                </p>\r\n                <Divider />\r\n                <Grid container style={{padding: '20px'}}>\r\n                    <Grid item xs={11}>\r\n                        <TextField id=\"outlined-basic-email\" label=\"Type your message\" fullWidth value={typedMessage} onChange={handleTypeMessageChange}/>\r\n                    </Grid>\r\n                    <Grid xs={1} align=\"right\">\r\n                        <Fab color=\"primary\" aria-label=\"add\" onClick={handleSendMessage}><SendIcon /></Fab>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n            <Snackbar\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'center',\r\n                  }}\r\n                open={openSuccessSnackbar}\r\n                autoHideDuration={5000}\r\n                onClose={handleClose}\r\n                message={snackbarMessage}\r\n            />\r\n        </Grid>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default ChatPage;","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\Stugrades.js",["299","300","301","302","303","304","305","306","307","308","309","310","311","312"],"import React, { useState, useEffect } from 'react';\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nimport Box from '@mui/material/Box';\r\nimport Grid from '@mui/material/Grid';\r\nimport Typography from '@mui/material/Typography';\r\nimport Select from '@mui/material/Select';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport Paper from '@mui/material/Paper';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Card from  '@mui/material/Card';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\n\r\n\r\nconst StuGrades = () => {\r\n  const[assignments,setAssignments] = useState([]);\r\n\r\n  const {courseId} = useParams();\r\n  const userId = localStorage.getItem('userId');\r\n  const [comments, setComments] = useState({});\r\n  const [grds, setGrds] = useState({});\r\n  const [totalScore,setTotalScore] = useState(0);\r\n  const [totalMaxPoints,setTotalMaxPoints] = useState(0);\r\n  const [percentage, setPercentage] = useState(0);\r\n\r\n  console.log('course',courseId);\r\n  var baseUrl = \"https://edusphere.vercel.app\"\r\n  // var baseUrl = \"http://127.0.0.1:8000/\"\r\n\r\n\r\n  const getAssignments = async()=>{\r\n    try {\r\n      const response = await fetch(baseUrl + `/api/student_check_grade?username=${userId}&courseId=${courseId}`, {\r\n        method: 'GET',\r\n      });\r\n      const data = await response.json();\r\n      setAssignments(data.Response);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n\r\n  useEffect( () => {    \r\n    getAssignments();\r\n    }, []);\r\n\r\nuseEffect( () => {    \r\n    var tscore = assignments.reduce((sum, assignment) => sum + assignment.Score, 0)\r\n    var tmaxscore = assignments.reduce((sum, assignment) => sum + assignment[\"Max points\"], 0)\r\n    var tpercentage = tmaxscore > 0 ? (tscore / tmaxscore) * 100 : 0\r\n    console.log(\"Student Grades page : Total Score \", tscore,\" out of \",tmaxscore, \" percentage : \",tpercentage)\r\n    setTotalScore(tscore);\r\n    setTotalMaxPoints(tmaxscore)\r\n    setPercentage(tpercentage);\r\n    }, [assignments]);\r\n\r\n  return (\r\n    <Box sx={{ flexGrow: 1, padding: 2 }}>\r\n        <Grid container justifyContent=\"space-between\" alignItems=\"center\">\r\n            <Grid item>\r\n            <Typography variant=\"h6\" fontWeight=\"bold\" sx={{ marginBottom: 2 }}>\r\n                Grades\r\n            </Typography>\r\n            </Grid>\r\n            <Grid item>\r\n            {percentage && percentage > 0 ?\r\n            <Typography variant=\"subtitle1\">\r\n                Score: {percentage.toFixed(2)}%\r\n            </Typography>\r\n            :\r\n            <Typography variant=\"subtitle1\">\r\n                Score: 0\r\n            </Typography>\r\n            }\r\n            </Grid>\r\n        </Grid>\r\n      {assignments.length > 0 && (\r\n        <Grid container>\r\n          <Grid item md={12} xs={12}>\r\n        <TableContainer component={Card}>\r\n          <Table sx={{ '& td, & th': { border: '1px solid rgba(224, 224, 224, 1)' } }}>\r\n            <TableHead sx={{fontWeight:\"bold\"}}>\r\n              <TableRow sx={{fontWeight:\"bold\"}}>\r\n                <TableCell sx={{fontWeight:\"bold\",backgroundColor: '#f5f5f5'}} align=\"center\">Assignment</TableCell>\r\n                <TableCell sx={{fontWeight:\"bold\",backgroundColor: '#f5f5f5'}} align=\"center\">Due Date</TableCell>\r\n                <TableCell sx={{fontWeight:\"bold\",backgroundColor: '#f5f5f5'}} align=\"center\">Score</TableCell>\r\n                <TableCell sx={{fontWeight:\"bold\",backgroundColor: '#f5f5f5'}} align=\"center\">Max Points</TableCell>\r\n                <TableCell sx={{fontWeight:\"bold\",backgroundColor: '#f5f5f5'}} align=\"center\">Comments</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {assignments.map((assignment, index)=> (\r\n                <TableRow key={assignment[\"Assignment Name\"]}>\r\n                  <TableCell align=\"center\" component=\"th\" scope=\"row\">\r\n                    {assignment[\"Assignment Name\"]}\r\n                  </TableCell>\r\n                  <TableCell align=\"center\" component=\"th\" scope=\"row\">\r\n                    {assignment[\"Due Date\"]}\r\n                  </TableCell>\r\n                  <TableCell align=\"center\" component=\"th\" scope=\"row\">\r\n                    {assignment.Score}\r\n                  </TableCell>\r\n                  <TableCell align=\"center\" component=\"th\" scope=\"row\">\r\n                    {assignment[\"Max points\"]}\r\n                  </TableCell>\r\n                  <TableCell align=\"center\">\r\n                  {assignment.comments}\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        </Grid>\r\n        </Grid>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default StuGrades;\r\n\r\n\r\n\r\n\r\n\r\n","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\assets\\InstructorSearch.js",["313","314","315","316"],"import React, { useState, useEffect } from 'react';\r\n// import CourseCardBrowse from './CourseCardBrowse';\r\nimport CourseCreate from './InstructorCourseCreate';\r\nimport Grid from '@mui/material/Grid';\r\nimport Box from '@mui/material/Box';\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Select from \"@mui/material/Select\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport Button from \"@mui/material/Button\";\r\nimport InputLabel from \"@mui/material/InputLabel\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\n\r\nvar baseUrl = \"https://edusphere.vercel.app\"\r\n\r\n\r\nconst InstructorSeacrh = () => {\r\n  const [courses, setCourses] = useState([]);\r\n\r\n  const [courseLevel, setCourseLevel] = useState(\"\");\r\n  const [courseName, setCourseName] = useState(\"\");\r\n  const [courseId, setCourseId] = useState(\"\");\r\n  const [enrolledCourses, setEnrolledCourses] = useState([]);\r\n\r\n  const instructorId = localStorage.getItem('userId');\r\n  const userType = localStorage.getItem(\"userType\");\r\n\r\n  const [filteredCourses, setFilteredCourses] = useState([]);\r\n\r\n  const getAllCourses = async () => {\r\n    try {\r\n      const response = await fetch(baseUrl + `/api/my-courses-professor/?username=${instructorId}`, {\r\n        method: 'GET',\r\n      });\r\n      const data = await response.json();\r\n      if (data.Status === \"Success\") {\r\n        setCourses(data.response);\r\n        setFilteredCourses(data.response);\r\n        console.log(data.response);\r\n      }\r\n      else {\r\n        console.log('failed');\r\n        console.log(data.response);\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n//   const getEnrolledCourses = async () => {\r\n//     try {\r\n//       const response = await fetch(baseUrl +`/api/my-courses/?username=${instructorId}`, {\r\n//         method: 'GET',\r\n//       });\r\n\r\n//       const data = await response.json();\r\n//       console.log(data.requestedCourses);\r\n//       setEnrolledCourses(data.requestedCourses);\r\n//   }\r\n//   catch{\r\n//     console.log('failed');\r\n//   }\r\n// }\r\n\r\n\r\n  useEffect(() => {\r\n    getAllCourses();\r\n    // getEnrolledCourses();\r\n  }, []);\r\n\r\n  const handleCourseLevelChange = (event) => {\r\n    if (event.target.value === 'all') {\r\n      setCourseLevel('');\r\n    } else {\r\n    setCourseLevel(event.target.value);\r\n    console.log(courseLevel);}\r\n  };\r\n\r\n  const handleCourseNameChange = (event) => {\r\n    setCourseName(event.target.value);\r\n  };\r\n\r\n  const handleCourseIdChange = (event) => {\r\n    setCourseId(event.target.value);\r\n  };\r\n\r\n  const handleSearchClick = () => {\r\n    const hasSearchValue = courseName || courseId || courseLevel;\r\n    if (!hasSearchValue) {\r\n      setFilteredCourses(courses);}\r\n    else {\r\n    const filteredCourses = courses.filter((course) => {\r\n    const matchesCourseName = !courseName || (course.name && course.name.toLowerCase().includes(courseName.toLowerCase()));\r\n    console.log('matchec',matchesCourseName);\r\n    const matchesCourseId = !courseId || (course.id && course.id.toString().includes(courseId));\r\n    const matchesCourseLevel = !courseLevel || (course.cLevel && course.cLevel.toLowerCase() === courseLevel.toLowerCase());\r\n\r\n    return hasSearchValue && (matchesCourseName && matchesCourseId && matchesCourseLevel);}\r\n  );\r\n  setFilteredCourses(filteredCourses);\r\n  console.log('chec',filteredCourses);}\r\n  // Update your state or use the filteredCourses array as needed\r\n};\r\n\r\n  const isCourseEnrolled = (courseexists) => {\r\n    return courseexists === true;\r\n  };\r\n\r\n  return (\r\n    <Box mt={3} ml={3} mr={3} >\r\n      <Grid container spacing={4} rowSpacing={1} columnSpacing={{ xs: 1, sm: 2, md: 4}} >\r\n        <Grid item xs={12} sm={6} md={3}>\r\n          <TextField\r\n            fullWidth\r\n            label=\"Course Name\"\r\n            value={courseName}\r\n            onChange={handleCourseNameChange}/>\r\n        </Grid>\r\n        <Grid item xs={12} sm={6} md={3}>\r\n          <TextField\r\n            fullWidth\r\n            label=\"Course ID\"\r\n            value={courseId}\r\n            onChange={handleCourseIdChange}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6} md={3}>\r\n        <FormControl fullWidth >\r\n        <InputLabel>Level</InputLabel>\r\n            <Select\r\n              \r\n              label=\"Course Level\"\r\n              value={courseLevel}\r\n              onChange={handleCourseLevelChange}>\r\n             \r\n              <MenuItem value=\"all\">All</MenuItem>\r\n              <MenuItem value=\"b\">Beginner</MenuItem>\r\n              <MenuItem value=\"i\">Intermediate</MenuItem>\r\n              <MenuItem value=\"a\">Advanced</MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6} md={3} mt={1}>\r\n          <Button variant=\"contained\" onClick={handleSearchClick}>\r\n            Search\r\n          </Button>\r\n      \r\n        </Grid>\r\n       \r\n      </Grid>\r\n\r\n      <Grid container spacing={0.5} mt={2}>\r\n        {filteredCourses.map((course) => (\r\n          <Grid item key={course.id} xs={12} sm={12} md={12} l={12}>\r\n            <CourseCreate course={course}  isEnrolled={isCourseEnrolled(course.courseExists)} username={instructorId}/>\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default InstructorSeacrh;\r\n","C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\pages\\assets\\InstructorCourseCreate.js",[],"C:\\Users\\narkh\\MSCS22_Akshay\\SE\\LMS_TEAM14\\project\\frontend\\src\\components\\misc\\MainContent.js",[],{"ruleId":"317","replacedBy":"318"},{"ruleId":"319","replacedBy":"320"},{"ruleId":"321","severity":1,"message":"322","line":32,"column":8,"nodeType":"323","messageId":"324","endLine":32,"endColumn":14},{"ruleId":"321","severity":1,"message":"325","line":36,"column":9,"nodeType":"323","messageId":"324","endLine":36,"endColumn":14},{"ruleId":"321","severity":1,"message":"326","line":2,"column":8,"nodeType":"323","messageId":"324","endLine":2,"endColumn":16},{"ruleId":"321","severity":1,"message":"327","line":6,"column":10,"nodeType":"323","messageId":"324","endLine":6,"endColumn":16},{"ruleId":"321","severity":1,"message":"328","line":15,"column":10,"nodeType":"323","messageId":"324","endLine":15,"endColumn":27},{"ruleId":"321","severity":1,"message":"329","line":17,"column":10,"nodeType":"323","messageId":"324","endLine":17,"endColumn":18},{"ruleId":"321","severity":1,"message":"330","line":18,"column":10,"nodeType":"323","messageId":"324","endLine":18,"endColumn":18},{"ruleId":"321","severity":1,"message":"331","line":20,"column":9,"nodeType":"323","messageId":"324","endLine":20,"endColumn":23},{"ruleId":"321","severity":1,"message":"332","line":24,"column":9,"nodeType":"323","messageId":"324","endLine":24,"endColumn":23},{"ruleId":"333","severity":1,"message":"334","line":72,"column":21,"nodeType":"335","messageId":"336","endLine":72,"endColumn":23},{"ruleId":"333","severity":1,"message":"334","line":74,"column":28,"nodeType":"335","messageId":"336","endLine":74,"endColumn":30},{"ruleId":"333","severity":1,"message":"334","line":74,"column":52,"nodeType":"335","messageId":"336","endLine":74,"endColumn":54},{"ruleId":"333","severity":1,"message":"334","line":76,"column":28,"nodeType":"335","messageId":"336","endLine":76,"endColumn":30},{"ruleId":"333","severity":1,"message":"334","line":76,"column":52,"nodeType":"335","messageId":"336","endLine":76,"endColumn":54},{"ruleId":"321","severity":1,"message":"337","line":17,"column":9,"nodeType":"323","messageId":"324","endLine":17,"endColumn":17},{"ruleId":"321","severity":1,"message":"338","line":88,"column":9,"nodeType":"323","messageId":"324","endLine":88,"endColumn":24},{"ruleId":"333","severity":1,"message":"334","line":43,"column":24,"nodeType":"335","messageId":"336","endLine":43,"endColumn":26},{"ruleId":"333","severity":1,"message":"339","line":104,"column":38,"nodeType":"335","messageId":"336","endLine":104,"endColumn":40},{"ruleId":"340","severity":1,"message":"341","line":93,"column":7,"nodeType":"342","endLine":93,"endColumn":9,"suggestions":"343"},{"ruleId":"321","severity":1,"message":"344","line":15,"column":25,"nodeType":"323","messageId":"324","endLine":15,"endColumn":41},{"ruleId":"321","severity":1,"message":"345","line":11,"column":8,"nodeType":"323","messageId":"324","endLine":11,"endColumn":17},{"ruleId":"321","severity":1,"message":"346","line":20,"column":9,"nodeType":"323","messageId":"324","endLine":20,"endColumn":17},{"ruleId":"321","severity":1,"message":"347","line":22,"column":10,"nodeType":"323","messageId":"324","endLine":22,"endColumn":17},{"ruleId":"321","severity":1,"message":"348","line":22,"column":18,"nodeType":"323","messageId":"324","endLine":22,"endColumn":28},{"ruleId":"340","severity":1,"message":"349","line":55,"column":4,"nodeType":"342","endLine":55,"endColumn":6,"suggestions":"350"},{"ruleId":"340","severity":1,"message":"351","line":71,"column":4,"nodeType":"342","endLine":71,"endColumn":16,"suggestions":"352"},{"ruleId":"321","severity":1,"message":"353","line":6,"column":8,"nodeType":"323","messageId":"324","endLine":6,"endColumn":19},{"ruleId":"321","severity":1,"message":"354","line":8,"column":19,"nodeType":"323","messageId":"324","endLine":8,"endColumn":28},{"ruleId":"321","severity":1,"message":"355","line":10,"column":20,"nodeType":"323","messageId":"324","endLine":10,"endColumn":24},{"ruleId":"321","severity":1,"message":"356","line":24,"column":21,"nodeType":"323","messageId":"324","endLine":24,"endColumn":33},{"ruleId":"321","severity":1,"message":"357","line":15,"column":8,"nodeType":"323","messageId":"324","endLine":15,"endColumn":24},{"ruleId":"321","severity":1,"message":"358","line":30,"column":12,"nodeType":"323","messageId":"324","endLine":30,"endColumn":21},{"ruleId":"321","severity":1,"message":"359","line":30,"column":22,"nodeType":"323","messageId":"324","endLine":30,"endColumn":34},{"ruleId":"340","severity":1,"message":"360","line":52,"column":7,"nodeType":"342","endLine":52,"endColumn":9,"suggestions":"361"},{"ruleId":"321","severity":1,"message":"362","line":4,"column":3,"nodeType":"323","messageId":"324","endLine":4,"endColumn":7},{"ruleId":"321","severity":1,"message":"363","line":5,"column":3,"nodeType":"323","messageId":"324","endLine":5,"endColumn":17},{"ruleId":"321","severity":1,"message":"364","line":6,"column":3,"nodeType":"323","messageId":"324","endLine":6,"endColumn":12},{"ruleId":"321","severity":1,"message":"365","line":7,"column":3,"nodeType":"323","messageId":"324","endLine":7,"endColumn":14},{"ruleId":"321","severity":1,"message":"366","line":8,"column":3,"nodeType":"323","messageId":"324","endLine":8,"endColumn":13},{"ruleId":"321","severity":1,"message":"367","line":6,"column":8,"nodeType":"323","messageId":"324","endLine":6,"endColumn":11},{"ruleId":"321","severity":1,"message":"368","line":16,"column":8,"nodeType":"323","messageId":"324","endLine":16,"endColumn":16},{"ruleId":"321","severity":1,"message":"369","line":4,"column":8,"nodeType":"323","messageId":"324","endLine":4,"endColumn":17},{"ruleId":"321","severity":1,"message":"370","line":106,"column":10,"nodeType":"323","messageId":"324","endLine":106,"endColumn":20},{"ruleId":"321","severity":1,"message":"371","line":106,"column":22,"nodeType":"323","messageId":"324","endLine":106,"endColumn":35},{"ruleId":"321","severity":1,"message":"372","line":107,"column":10,"nodeType":"323","messageId":"324","endLine":107,"endColumn":21},{"ruleId":"321","severity":1,"message":"373","line":107,"column":23,"nodeType":"323","messageId":"324","endLine":107,"endColumn":37},{"ruleId":"333","severity":1,"message":"334","line":144,"column":24,"nodeType":"335","messageId":"336","endLine":144,"endColumn":26},{"ruleId":"321","severity":1,"message":"374","line":4,"column":8,"nodeType":"323","messageId":"324","endLine":4,"endColumn":21},{"ruleId":"321","severity":1,"message":"355","line":2,"column":10,"nodeType":"323","messageId":"324","endLine":2,"endColumn":14},{"ruleId":"321","severity":1,"message":"375","line":5,"column":8,"nodeType":"323","messageId":"324","endLine":5,"endColumn":19},{"ruleId":"321","severity":1,"message":"376","line":6,"column":8,"nodeType":"323","messageId":"324","endLine":6,"endColumn":14},{"ruleId":"321","severity":1,"message":"355","line":8,"column":10,"nodeType":"323","messageId":"324","endLine":8,"endColumn":14},{"ruleId":"321","severity":1,"message":"377","line":10,"column":8,"nodeType":"323","messageId":"324","endLine":10,"endColumn":12},{"ruleId":"340","severity":1,"message":"378","line":81,"column":8,"nodeType":"342","endLine":81,"endColumn":10,"suggestions":"379"},{"ruleId":"321","severity":1,"message":"380","line":10,"column":3,"nodeType":"323","messageId":"324","endLine":10,"endColumn":8},{"ruleId":"321","severity":1,"message":"377","line":18,"column":8,"nodeType":"323","messageId":"324","endLine":18,"endColumn":12},{"ruleId":"321","severity":1,"message":"366","line":10,"column":3,"nodeType":"323","messageId":"324","endLine":10,"endColumn":13},{"ruleId":"321","severity":1,"message":"381","line":5,"column":8,"nodeType":"323","messageId":"324","endLine":5,"endColumn":13},{"ruleId":"321","severity":1,"message":"382","line":62,"column":9,"nodeType":"323","messageId":"324","endLine":62,"endColumn":27},{"ruleId":"321","severity":1,"message":"383","line":75,"column":9,"nodeType":"323","messageId":"324","endLine":75,"endColumn":25},{"ruleId":"321","severity":1,"message":"384","line":5,"column":8,"nodeType":"323","messageId":"324","endLine":5,"endColumn":17},{"ruleId":"321","severity":1,"message":"353","line":13,"column":8,"nodeType":"323","messageId":"324","endLine":13,"endColumn":19},{"ruleId":"321","severity":1,"message":"385","line":14,"column":8,"nodeType":"323","messageId":"324","endLine":14,"endColumn":18},{"ruleId":"321","severity":1,"message":"386","line":15,"column":8,"nodeType":"323","messageId":"324","endLine":15,"endColumn":13},{"ruleId":"321","severity":1,"message":"387","line":16,"column":10,"nodeType":"323","messageId":"324","endLine":16,"endColumn":19},{"ruleId":"321","severity":1,"message":"357","line":19,"column":8,"nodeType":"323","messageId":"324","endLine":19,"endColumn":24},{"ruleId":"321","severity":1,"message":"388","line":27,"column":12,"nodeType":"323","messageId":"324","endLine":27,"endColumn":24},{"ruleId":"321","severity":1,"message":"389","line":27,"column":26,"nodeType":"323","messageId":"324","endLine":27,"endColumn":41},{"ruleId":"321","severity":1,"message":"358","line":32,"column":11,"nodeType":"323","messageId":"324","endLine":32,"endColumn":20},{"ruleId":"321","severity":1,"message":"359","line":32,"column":21,"nodeType":"323","messageId":"324","endLine":32,"endColumn":33},{"ruleId":"321","severity":1,"message":"390","line":40,"column":11,"nodeType":"323","messageId":"324","endLine":40,"endColumn":30},{"ruleId":"340","severity":1,"message":"391","line":84,"column":8,"nodeType":"342","endLine":84,"endColumn":10,"suggestions":"392"},{"ruleId":"321","severity":1,"message":"393","line":87,"column":11,"nodeType":"323","messageId":"324","endLine":87,"endColumn":26},{"ruleId":"333","severity":1,"message":"334","line":43,"column":22,"nodeType":"335","messageId":"336","endLine":43,"endColumn":24},{"ruleId":"340","severity":1,"message":"394","line":69,"column":3,"nodeType":"342","endLine":69,"endColumn":5,"suggestions":"395"},{"ruleId":"321","severity":1,"message":"396","line":87,"column":13,"nodeType":"323","messageId":"324","endLine":87,"endColumn":17},{"ruleId":"321","severity":1,"message":"397","line":102,"column":9,"nodeType":"323","messageId":"324","endLine":102,"endColumn":16},{"ruleId":"321","severity":1,"message":"380","line":11,"column":8,"nodeType":"323","messageId":"324","endLine":11,"endColumn":13},{"ruleId":"340","severity":1,"message":"398","line":56,"column":8,"nodeType":"342","endLine":56,"endColumn":10,"suggestions":"399"},{"ruleId":"321","severity":1,"message":"369","line":4,"column":8,"nodeType":"323","messageId":"324","endLine":4,"endColumn":17},{"ruleId":"321","severity":1,"message":"400","line":29,"column":8,"nodeType":"323","messageId":"324","endLine":29,"endColumn":23},{"ruleId":"321","severity":1,"message":"401","line":30,"column":8,"nodeType":"323","messageId":"324","endLine":30,"endColumn":19},{"ruleId":"321","severity":1,"message":"370","line":108,"column":10,"nodeType":"323","messageId":"324","endLine":108,"endColumn":20},{"ruleId":"321","severity":1,"message":"371","line":108,"column":22,"nodeType":"323","messageId":"324","endLine":108,"endColumn":35},{"ruleId":"321","severity":1,"message":"372","line":109,"column":10,"nodeType":"323","messageId":"324","endLine":109,"endColumn":21},{"ruleId":"321","severity":1,"message":"373","line":109,"column":23,"nodeType":"323","messageId":"324","endLine":109,"endColumn":37},{"ruleId":"321","severity":1,"message":"396","line":139,"column":13,"nodeType":"323","messageId":"324","endLine":139,"endColumn":17},{"ruleId":"321","severity":1,"message":"367","line":5,"column":8,"nodeType":"323","messageId":"324","endLine":5,"endColumn":11},{"ruleId":"333","severity":1,"message":"334","line":90,"column":32,"nodeType":"335","messageId":"336","endLine":90,"endColumn":34},{"ruleId":"321","severity":1,"message":"402","line":143,"column":13,"nodeType":"323","messageId":"324","endLine":143,"endColumn":29},{"ruleId":"321","severity":1,"message":"403","line":144,"column":13,"nodeType":"323","messageId":"324","endLine":144,"endColumn":30},{"ruleId":"333","severity":1,"message":"334","line":193,"column":54,"nodeType":"335","messageId":"336","endLine":193,"endColumn":56},{"ruleId":"333","severity":1,"message":"334","line":208,"column":43,"nodeType":"335","messageId":"336","endLine":208,"endColumn":45},{"ruleId":"321","severity":1,"message":"404","line":7,"column":8,"nodeType":"323","messageId":"324","endLine":7,"endColumn":14},{"ruleId":"321","severity":1,"message":"405","line":8,"column":8,"nodeType":"323","messageId":"324","endLine":8,"endColumn":16},{"ruleId":"321","severity":1,"message":"353","line":9,"column":8,"nodeType":"323","messageId":"324","endLine":9,"endColumn":19},{"ruleId":"321","severity":1,"message":"385","line":10,"column":8,"nodeType":"323","messageId":"324","endLine":10,"endColumn":18},{"ruleId":"321","severity":1,"message":"380","line":11,"column":8,"nodeType":"323","messageId":"324","endLine":11,"endColumn":13},{"ruleId":"321","severity":1,"message":"406","line":19,"column":8,"nodeType":"323","messageId":"324","endLine":19,"endColumn":17},{"ruleId":"321","severity":1,"message":"376","line":20,"column":8,"nodeType":"323","messageId":"324","endLine":20,"endColumn":14},{"ruleId":"321","severity":1,"message":"407","line":28,"column":10,"nodeType":"323","messageId":"324","endLine":28,"endColumn":18},{"ruleId":"321","severity":1,"message":"408","line":28,"column":20,"nodeType":"323","messageId":"324","endLine":28,"endColumn":31},{"ruleId":"321","severity":1,"message":"409","line":29,"column":10,"nodeType":"323","messageId":"324","endLine":29,"endColumn":14},{"ruleId":"321","severity":1,"message":"410","line":29,"column":16,"nodeType":"323","messageId":"324","endLine":29,"endColumn":23},{"ruleId":"321","severity":1,"message":"411","line":30,"column":10,"nodeType":"323","messageId":"324","endLine":30,"endColumn":20},{"ruleId":"321","severity":1,"message":"412","line":31,"column":10,"nodeType":"323","messageId":"324","endLine":31,"endColumn":24},{"ruleId":"340","severity":1,"message":"360","line":54,"column":8,"nodeType":"342","endLine":54,"endColumn":10,"suggestions":"413"},{"ruleId":"321","severity":1,"message":"414","line":22,"column":10,"nodeType":"323","messageId":"324","endLine":22,"endColumn":25},{"ruleId":"321","severity":1,"message":"415","line":22,"column":27,"nodeType":"323","messageId":"324","endLine":22,"endColumn":45},{"ruleId":"321","severity":1,"message":"346","line":25,"column":9,"nodeType":"323","messageId":"324","endLine":25,"endColumn":17},{"ruleId":"340","severity":1,"message":"416","line":68,"column":6,"nodeType":"342","endLine":68,"endColumn":8,"suggestions":"417"},"no-native-reassign",["418"],"no-negated-in-lhs",["419"],"no-unused-vars","'Grades' is defined but never used.","Identifier","unusedVar","'Check' is assigned a value but never used.","'ReactDOM' is defined but never used.","'render' is defined but never used.","'horizontalNavItem' is assigned a value but never used.","'homecont' is assigned a value but never used.","'syllcont' is assigned a value but never used.","'handleHomepage' is assigned a value but never used.","'handleSyllpage' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'navigate' is assigned a value but never used.","'responseGoogle2' is assigned a value but never used.","Expected '!==' and instead saw '!='.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getAnn'. Either include it or remove the dependency array.","ArrayExpression",["420"],"'setPasswordError' is assigned a value but never used.","'CheckIcon' is defined but never used.","'userType' is assigned a value but never used.","'approve' is assigned a value but never used.","'setApprove' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getdata'. Either include it or remove the dependency array.",["421"],"React Hook useEffect has a missing dependency: 'props.prop'. Either include it or remove the dependency array.",["422"],"'FormControl' is defined but never used.","'useEffect' is defined but never used.","'Link' is defined but never used.","'assignmentId' is assigned a value but never used.","'CircularProgress' is defined but never used.","'isLoading' is assigned a value but never used.","'setIsLoading' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getAssignments'. Either include it or remove the dependency array.",["423"],"'Card' is defined but never used.","'CardActionArea' is defined but never used.","'CardMedia' is defined but never used.","'CardContent' is defined but never used.","'Typography' is defined but never used.","'Box' is defined but never used.","'Skeleton' is defined but never used.","'Container' is defined but never used.","'activeMenu' is assigned a value but never used.","'setActiveMenu' is assigned a value but never used.","'showProfile' is assigned a value but never used.","'setShowProfile' is assigned a value but never used.","'EduSphereLogo' is defined but never used.","'CardActions' is defined but never used.","'Button' is defined but never used.","'Grid' is defined but never used.","React Hook useEffect has missing dependencies: 'getEnrolledCourses', 'navigate', 'userId', and 'userType'. Either include them or remove the dependency array.",["424"],"'Paper' is defined but never used.","'axios' is defined but never used.","'fetchAnnouncements' is assigned a value but never used.","'fetchAssignments' is assigned a value but never used.","'DOMPurify' is defined but never used.","'InputLabel' is defined but never used.","'Input' is defined but never used.","'useParams' is defined but never used.","'selectedFile' is assigned a value but never used.","'setSelectedFile' is assigned a value but never used.","'handleNewAssignment' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'userId'. Either include it or remove the dependency array.",["425"],"'handleCardClick' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'fetchModules' and 'modules'. Either include them or remove the dependency array.",["426"],"'data' is assigned a value but never used.","'isValid' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'courseId' and 'userId'. Either include them or remove the dependency array.",["427"],"'ClassSearchPage' is defined but never used.","'CoursesPage' is defined but never used.","'selectedUserName' is assigned a value but never used.","'selectedUserEmail' is assigned a value but never used.","'Select' is defined but never used.","'MenuItem' is defined but never used.","'TextField' is defined but never used.","'comments' is assigned a value but never used.","'setComments' is assigned a value but never used.","'grds' is assigned a value but never used.","'setGrds' is assigned a value but never used.","'totalScore' is assigned a value but never used.","'totalMaxPoints' is assigned a value but never used.",["428"],"'enrolledCourses' is assigned a value but never used.","'setEnrolledCourses' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getAllCourses'. Either include it or remove the dependency array.",["429"],"no-global-assign","no-unsafe-negation",{"desc":"430","fix":"431"},{"desc":"432","fix":"433"},{"desc":"434","fix":"435"},{"desc":"436","fix":"437"},{"desc":"438","fix":"439"},{"desc":"440","fix":"441"},{"desc":"442","fix":"443"},{"desc":"444","fix":"445"},{"desc":"436","fix":"446"},{"desc":"447","fix":"448"},"Update the dependencies array to be: [getAnn]",{"range":"449","text":"450"},"Update the dependencies array to be: [getdata]",{"range":"451","text":"452"},"Update the dependencies array to be: [courseinfo, props.prop]",{"range":"453","text":"454"},"Update the dependencies array to be: [getAssignments]",{"range":"455","text":"456"},"Update the dependencies array to be: [getEnrolledCourses, navigate, userId, userType]",{"range":"457","text":"458"},"Update the dependencies array to be: [userId]",{"range":"459","text":"460"},"Update the dependencies array to be: [fetchModules, modules]",{"range":"461","text":"462"},"Update the dependencies array to be: [courseId, userId]",{"range":"463","text":"464"},{"range":"465","text":"456"},"Update the dependencies array to be: [getAllCourses]",{"range":"466","text":"467"},[2948,2950],"[getAnn]",[1738,1740],"[getdata]",[2083,2095],"[courseinfo, props.prop]",[1890,1892],"[getAssignments]",[2410,2412],"[getEnrolledCourses, navigate, userId, userType]",[3179,3181],"[userId]",[2126,2128],"[fetchModules, modules]",[1990,1992],"[courseId, userId]",[1868,1870],[2114,2116],"[getAllCourses]"]